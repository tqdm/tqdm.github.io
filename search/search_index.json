{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"tqdm # tqdm means \"progress\" in Arabic ( taqadum , \u062a\u0642\u062f\u0651\u0645) and is an abbreviation for \"I love you so much\" in Spanish ( te quiero demasiado ). Instantly make your loops show a smart progress meter - just wrap any iterable with tqdm(iterable) , and you're done! from tqdm import tqdm for i in tqdm(range(10000)): ... 76%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 | 7568/10000 [00:33<00:10, 229.00it/s] trange(N) can be also used as a convenient shortcut for tqdm(xrange(N)) . It can also be executed as a module with pipes: $ seq 9999999 | tqdm --bytes | wc -l 75.2MB [00:00, 217MB/s] 9999999 $ 7z a -bd -r backup.7z docs/ | grep Compressing | \\ tqdm --total $(find docs/ -type f | wc -l) --unit files >> backup.log 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2589| 8014/8014 [01:37<00:00, 82.29files/s] Overhead is low -- about 60ns per iteration (80ns with tqdm_gui ), and is unit tested against performance regression. By comparison, the well-established ProgressBar has an 800ns/iter overhead. In addition to its low overhead, tqdm uses smart algorithms to predict the remaining time and to skip unnecessary iteration displays, which allows for a negligible overhead in most cases. tqdm works on any platform (Linux, Windows, Mac, FreeBSD, NetBSD, Solaris/SunOS), in any console or in a GUI, and is also friendly with IPython/Jupyter notebooks. tqdm does not require any dependencies (not even curses !), just Python and an environment supporting carriage return \\r and line feed \\n control characters.","title":"Home"},{"location":"#tqdm","text":"tqdm means \"progress\" in Arabic ( taqadum , \u062a\u0642\u062f\u0651\u0645) and is an abbreviation for \"I love you so much\" in Spanish ( te quiero demasiado ). Instantly make your loops show a smart progress meter - just wrap any iterable with tqdm(iterable) , and you're done! from tqdm import tqdm for i in tqdm(range(10000)): ... 76%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 | 7568/10000 [00:33<00:10, 229.00it/s] trange(N) can be also used as a convenient shortcut for tqdm(xrange(N)) . It can also be executed as a module with pipes: $ seq 9999999 | tqdm --bytes | wc -l 75.2MB [00:00, 217MB/s] 9999999 $ 7z a -bd -r backup.7z docs/ | grep Compressing | \\ tqdm --total $(find docs/ -type f | wc -l) --unit files >> backup.log 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2589| 8014/8014 [01:37<00:00, 82.29files/s] Overhead is low -- about 60ns per iteration (80ns with tqdm_gui ), and is unit tested against performance regression. By comparison, the well-established ProgressBar has an 800ns/iter overhead. In addition to its low overhead, tqdm uses smart algorithms to predict the remaining time and to skip unnecessary iteration displays, which allows for a negligible overhead in most cases. tqdm works on any platform (Linux, Windows, Mac, FreeBSD, NetBSD, Solaris/SunOS), in any console or in a GUI, and is also friendly with IPython/Jupyter notebooks. tqdm does not require any dependencies (not even curses !), just Python and an environment supporting carriage return \\r and line feed \\n control characters.","title":"tqdm"},{"location":"contributing/","text":"HOW TO CONTRIBUTE TO TQDM # This file describes how to contribute changes to the project, and upload released to the pypi repository. Most of the management commands have been directly placed inside the Makefile: make [<alias>] # on UNIX-like environments python setup.py make [<alias>] # if make is unavailable The latter depends on py-make>=0.1.0 . Use the alias help (or leave blank) to list all available aliases. HOW TO COMMIT CONTRIBUTIONS # Contributions to the project are made using the \"Fork & Pull\" model. The typical steps would be: create an account on github fork tqdm make a local clone: git clone https://github.com/your_account/tqdm.git make changes on the local copy test (see below) and commit changes git commit -a -m \"my message\" push to your GitHub account: git push origin create a Pull Request (PR) from your GitHub fork (go to your fork's webpage and click on \"Pull Request.\" You can then add a message to describe your proposal.) WHAT CODE LAYOUT SHOULD I FOLLOW? # Don't worry too much - maintainers can help reorganise contributions. However it would be helpful to bear in mind: The standard core of tqdm , i.e. tqdm.std.tqdm must have no dependencies apart from pure python built-in standard libraries must have negligible impact on performance should have 100% coverage by unit tests should be appropriately commented should have well-formatted docstrings for functions under 76 chars (incl. initial spaces) to avoid linebreaks in terminal pagers use two spaces between variable name and colon, specify a type, and most likely state that it's optional: VAR<space><space>:<space>TYPE[, optional] use [default: ...] for default values of keyword arguments will not break backward compatibility unless there is a very good reason e.g. breaking py26 compatibility purely in favour of readability (such as converting dict(a=1) to {'a': 1} ) is not a good enough reason API changes should be discussed carefully remember, with millions of downloads per month, tqdm must be extremely fast and reliable Any other kind of change may be included in a (possibly new) submodule submodules are likely single python files under the main tqdm/ directory large submodules requiring a sub-folder should be included in MANIFEST.in submodules extending tqdm.std.tqdm or any other module (e.g. tqdm.notebook.tqdm , tqdm.gui.tqdm ) CLI wrapper tqdm.cli if a newly added tqdm.std.tqdm option is not supported by the CLI, append to tqdm.cli.UNSUPPORTED_OPTS can implement anything from experimental new features to support for third-party libraries such as pandas , numpy , etc. submodule maturity alpha: experimental; missing unit tests, comments, and/or feedback; raises tqdm.TqdmExperimentalWarning beta: well-used; commented, perhaps still missing tests stable: >10 users; commented, 80% coverage .meta/ A \"hidden\" folder containing helper utilities not strictly part of tqdm distribution itself TESTING # Once again, don't worry too much - tests are automated online, and maintainers can also help. To test functionality (such as before submitting a Pull Request), there are a number of unit tests. Standard unit tests # The standard way to run the tests: install tox cd to the root of the tqdm directory (in the same folder as this file) run the following command: [python setup.py] make test # or: tox --skip-missing-interpreters This will build the module and run the tests in a virtual environment. Errors and coverage rates will be output to the console/log. (Ignore missing interpreters errors - these are due to the local machine missing certain versions of Python.) Note: to install all versions of the Python interpreter that are specified in tox.ini , you can use MiniConda to install a minimal setup. You must also make sure that each distribution has an alias to call the Python interpreter: python27 for Python 2.7's interpreter, python32 for Python 3.2's, etc. Alternative unit tests with Nose # Alternatively, use nose to run the tests just for the current Python version: install nose and flake8 run the following command: [python setup.py] make alltests MANAGE A NEW RELEASE # This section is intended for the project's maintainers and describes how to build and upload a new release. Once again, [python setup.py] make [<alias>] will help. Also consider pip install ing development utilities: -r requirements-dev.txt or tqdm[dev] . Pre-commit Hook # It's probably a good idea to add [python setup.py] make pre-commit to .git/hooks/pre-commit for convenient local sanity-checking. Semantic Versioning # The tqdm repository managers should: regularly bump the version number in the file _version.py follow the Semantic Versioning convention take care of this (instead of users) to avoid PR conflicts solely due to the version file bumping Note: tools can be used to automate this process, such as bumpversion or python-semanticversion . Checking setup.py # To check that the setup.py file is compliant with PyPI requirements (e.g. version number; reStructuredText in README.rst ) use: [python setup.py] make testsetup To upload just metadata (including overwriting mistakenly uploaded metadata) to PyPI, use: [python setup.py] make pypimeta Merging Pull Requests # This section describes how to cleanly merge PRs. 1 Rebase # From your project repository, merge and test (replace pr-branch-name as appropriate): git fetch origin git checkout -b pr-branch-name origin/pr-branch-name git rebase master If there are conflicts: git mergetool git rebase --continue 2 Push # Update branch with the rebased history: git push origin pr-branch-name --force Non maintainers can stop here. Note: NEVER just git push --force (this will push all local branches, overwriting remotes). 3 Merge # git checkout master git merge --no-ff pr-branch-name 4 Test # [python setup.py] make alltests 5 Version # Modify tqdm/_version.py and amend the last (merge) commit: git add tqdm/_version.py git commit --amend # Add \"+ bump version\" in the commit message 6 Push to master # git push origin master Building a Release and Uploading to PyPI # Formally publishing requires additional steps: testing and tagging. Test # ensure that all online CI tests have passed check setup.py and MANIFEST.in - which define the packaging process and info that will be uploaded to PyPI - using [python setup.py] make installdev Tag # ensure the version has been bumped, committed and tagged. The tag format is v{major}.{minor}.{patch} , for example: v4.4.1 . The current commit's tag is used in the version checking process. If the current commit is not tagged appropriately, the version will display as v{major}.{minor}.{patch}-{commit_hash} . Upload # Travis CI should automatically do this after pushing tags. Manual instructions are given below in case of failure. Build tqdm into a distributable python package: [python setup.py] make build This will generate several builds in the dist/ folder. On non-windows machines the windows exe installer may fail to build. This is normal. Finally, upload everything to pypi. This can be done easily using the twine module: [python setup.py] make pypi Also, the new release can (should) be added to GitHub by creating a new release from the web interface ; uploading packages from the dist/ folder created by [python setup.py] make build . The wiki can be automatically updated with GitHub release notes by running make within the wiki repository. Docker images may be uploaded to https://hub.docker.com/r/tqdm/tqdm . Assuming docker is installed : make -B docker docker login docker push tqdm/tqdm:latest docker push tqdm/tqdm:$(docker run -i --rm tqdm/tqdm -v) Snaps may be uploaded to https://snapcraft.io/tqdm . Assuming snapcraft is installed ( snap install snapcraft --classic --beta ): make snap snapcraft login snapcraft push tqdm*.snap --release stable Notes # you can also test on the PyPI test servers test.pypi.org before the real deployment in case of a mistake, you can delete an uploaded release on PyPI, but you cannot re-upload another with the same version number in case of a mistake in the metadata on PyPI (e.g. bad README), updating just the metadata is possible: [python setup.py] make pypimeta Updating Websites # The most important file is .readme.rst , which should always be kept up-to-date and in sync with the in-line source documentation. This will affect all of the following: README.rst (generated by mkdocs.py during make build ) The main repository site which automatically serves the latest README.rst as well as links to all of GitHub's features. This is the preferred online referral link for tqdm . The PyPI mirror which automatically serves the latest release built from README.rst as well as links to past releases. Many external web crawlers. Additionally (less maintained), there exists: A wiki which is publicly editable. The gh-pages project which is built from the gh-pages branch , which is built using asv . The gh-pages root which is built from a separate github.io repo . QUICK DEV SUMMARY # For experienced devs, once happy with local master: bump version in tqdm/_version.py test ( [python setup.py] make alltests ) git commit [--amend] # -m \"bump version\" git push wait for tests to pass a) in case of failure, fix and go back to (2) git tag vM.m.p && git push --tags [AUTO:TravisCI] [python setup.py] make distclean [AUTO:TravisCI] [python setup.py] make build [AUTO:TravisCI] upload to PyPI. either: a) [python setup.py] make pypi , or b) twine upload -s -i $(git config user.signingkey) dist/tqdm-* [AUTO:TravisCI] upload to docker hub: a) make -B docker b) docker push tqdm/tqdm:latest c) docker push tqdm/tqdm:$(docker run -i --rm tqdm/tqdm -v) [AUTO:TravisCI] upload to snapcraft: a) make snap , and b) snapcraft push tqdm*.snap --release stable Wait for travis to draft a new release on https://github.com/tqdm/tqdm/releases a) add helpful release notes b) [AUTO:TravisCI] attach dist/tqdm-* binaries (usually only *.whl* ) [SUB] run make in the wiki submodule to update release notes [SUB] run make deploy in the docs submodule to update website [SUB] accept the automated PR in the feedstock submodule to update conda Key: [AUTO:TravisCI] : Travis CI should automatically do this after git push --tags (6) [SUB] : Requires one-time make submodules to clone docs , wiki , and feedstock","title":"Contributing"},{"location":"contributing/#how-to-contribute-to-tqdm","text":"This file describes how to contribute changes to the project, and upload released to the pypi repository. Most of the management commands have been directly placed inside the Makefile: make [<alias>] # on UNIX-like environments python setup.py make [<alias>] # if make is unavailable The latter depends on py-make>=0.1.0 . Use the alias help (or leave blank) to list all available aliases.","title":"HOW TO CONTRIBUTE TO TQDM"},{"location":"contributing/#how-to-commit-contributions","text":"Contributions to the project are made using the \"Fork & Pull\" model. The typical steps would be: create an account on github fork tqdm make a local clone: git clone https://github.com/your_account/tqdm.git make changes on the local copy test (see below) and commit changes git commit -a -m \"my message\" push to your GitHub account: git push origin create a Pull Request (PR) from your GitHub fork (go to your fork's webpage and click on \"Pull Request.\" You can then add a message to describe your proposal.)","title":"HOW TO COMMIT CONTRIBUTIONS"},{"location":"contributing/#what-code-layout-should-i-follow","text":"Don't worry too much - maintainers can help reorganise contributions. However it would be helpful to bear in mind: The standard core of tqdm , i.e. tqdm.std.tqdm must have no dependencies apart from pure python built-in standard libraries must have negligible impact on performance should have 100% coverage by unit tests should be appropriately commented should have well-formatted docstrings for functions under 76 chars (incl. initial spaces) to avoid linebreaks in terminal pagers use two spaces between variable name and colon, specify a type, and most likely state that it's optional: VAR<space><space>:<space>TYPE[, optional] use [default: ...] for default values of keyword arguments will not break backward compatibility unless there is a very good reason e.g. breaking py26 compatibility purely in favour of readability (such as converting dict(a=1) to {'a': 1} ) is not a good enough reason API changes should be discussed carefully remember, with millions of downloads per month, tqdm must be extremely fast and reliable Any other kind of change may be included in a (possibly new) submodule submodules are likely single python files under the main tqdm/ directory large submodules requiring a sub-folder should be included in MANIFEST.in submodules extending tqdm.std.tqdm or any other module (e.g. tqdm.notebook.tqdm , tqdm.gui.tqdm ) CLI wrapper tqdm.cli if a newly added tqdm.std.tqdm option is not supported by the CLI, append to tqdm.cli.UNSUPPORTED_OPTS can implement anything from experimental new features to support for third-party libraries such as pandas , numpy , etc. submodule maturity alpha: experimental; missing unit tests, comments, and/or feedback; raises tqdm.TqdmExperimentalWarning beta: well-used; commented, perhaps still missing tests stable: >10 users; commented, 80% coverage .meta/ A \"hidden\" folder containing helper utilities not strictly part of tqdm distribution itself","title":"WHAT CODE LAYOUT SHOULD I FOLLOW?"},{"location":"contributing/#testing","text":"Once again, don't worry too much - tests are automated online, and maintainers can also help. To test functionality (such as before submitting a Pull Request), there are a number of unit tests.","title":"TESTING"},{"location":"contributing/#standard-unit-tests","text":"The standard way to run the tests: install tox cd to the root of the tqdm directory (in the same folder as this file) run the following command: [python setup.py] make test # or: tox --skip-missing-interpreters This will build the module and run the tests in a virtual environment. Errors and coverage rates will be output to the console/log. (Ignore missing interpreters errors - these are due to the local machine missing certain versions of Python.) Note: to install all versions of the Python interpreter that are specified in tox.ini , you can use MiniConda to install a minimal setup. You must also make sure that each distribution has an alias to call the Python interpreter: python27 for Python 2.7's interpreter, python32 for Python 3.2's, etc.","title":"Standard unit tests"},{"location":"contributing/#alternative-unit-tests-with-nose","text":"Alternatively, use nose to run the tests just for the current Python version: install nose and flake8 run the following command: [python setup.py] make alltests","title":"Alternative unit tests with Nose"},{"location":"contributing/#manage-a-new-release","text":"This section is intended for the project's maintainers and describes how to build and upload a new release. Once again, [python setup.py] make [<alias>] will help. Also consider pip install ing development utilities: -r requirements-dev.txt or tqdm[dev] .","title":"MANAGE A NEW RELEASE"},{"location":"contributing/#pre-commit-hook","text":"It's probably a good idea to add [python setup.py] make pre-commit to .git/hooks/pre-commit for convenient local sanity-checking.","title":"Pre-commit Hook"},{"location":"contributing/#semantic-versioning","text":"The tqdm repository managers should: regularly bump the version number in the file _version.py follow the Semantic Versioning convention take care of this (instead of users) to avoid PR conflicts solely due to the version file bumping Note: tools can be used to automate this process, such as bumpversion or python-semanticversion .","title":"Semantic Versioning"},{"location":"contributing/#checking-setuppy","text":"To check that the setup.py file is compliant with PyPI requirements (e.g. version number; reStructuredText in README.rst ) use: [python setup.py] make testsetup To upload just metadata (including overwriting mistakenly uploaded metadata) to PyPI, use: [python setup.py] make pypimeta","title":"Checking setup.py"},{"location":"contributing/#merging-pull-requests","text":"This section describes how to cleanly merge PRs.","title":"Merging Pull Requests"},{"location":"contributing/#1-rebase","text":"From your project repository, merge and test (replace pr-branch-name as appropriate): git fetch origin git checkout -b pr-branch-name origin/pr-branch-name git rebase master If there are conflicts: git mergetool git rebase --continue","title":"1 Rebase"},{"location":"contributing/#2-push","text":"Update branch with the rebased history: git push origin pr-branch-name --force Non maintainers can stop here. Note: NEVER just git push --force (this will push all local branches, overwriting remotes).","title":"2 Push"},{"location":"contributing/#3-merge","text":"git checkout master git merge --no-ff pr-branch-name","title":"3 Merge"},{"location":"contributing/#4-test","text":"[python setup.py] make alltests","title":"4 Test"},{"location":"contributing/#5-version","text":"Modify tqdm/_version.py and amend the last (merge) commit: git add tqdm/_version.py git commit --amend # Add \"+ bump version\" in the commit message","title":"5 Version"},{"location":"contributing/#6-push-to-master","text":"git push origin master","title":"6 Push to master"},{"location":"contributing/#building-a-release-and-uploading-to-pypi","text":"Formally publishing requires additional steps: testing and tagging.","title":"Building a Release and Uploading to PyPI"},{"location":"contributing/#test","text":"ensure that all online CI tests have passed check setup.py and MANIFEST.in - which define the packaging process and info that will be uploaded to PyPI - using [python setup.py] make installdev","title":"Test"},{"location":"contributing/#tag","text":"ensure the version has been bumped, committed and tagged. The tag format is v{major}.{minor}.{patch} , for example: v4.4.1 . The current commit's tag is used in the version checking process. If the current commit is not tagged appropriately, the version will display as v{major}.{minor}.{patch}-{commit_hash} .","title":"Tag"},{"location":"contributing/#upload","text":"Travis CI should automatically do this after pushing tags. Manual instructions are given below in case of failure. Build tqdm into a distributable python package: [python setup.py] make build This will generate several builds in the dist/ folder. On non-windows machines the windows exe installer may fail to build. This is normal. Finally, upload everything to pypi. This can be done easily using the twine module: [python setup.py] make pypi Also, the new release can (should) be added to GitHub by creating a new release from the web interface ; uploading packages from the dist/ folder created by [python setup.py] make build . The wiki can be automatically updated with GitHub release notes by running make within the wiki repository. Docker images may be uploaded to https://hub.docker.com/r/tqdm/tqdm . Assuming docker is installed : make -B docker docker login docker push tqdm/tqdm:latest docker push tqdm/tqdm:$(docker run -i --rm tqdm/tqdm -v) Snaps may be uploaded to https://snapcraft.io/tqdm . Assuming snapcraft is installed ( snap install snapcraft --classic --beta ): make snap snapcraft login snapcraft push tqdm*.snap --release stable","title":"Upload"},{"location":"contributing/#notes","text":"you can also test on the PyPI test servers test.pypi.org before the real deployment in case of a mistake, you can delete an uploaded release on PyPI, but you cannot re-upload another with the same version number in case of a mistake in the metadata on PyPI (e.g. bad README), updating just the metadata is possible: [python setup.py] make pypimeta","title":"Notes"},{"location":"contributing/#updating-websites","text":"The most important file is .readme.rst , which should always be kept up-to-date and in sync with the in-line source documentation. This will affect all of the following: README.rst (generated by mkdocs.py during make build ) The main repository site which automatically serves the latest README.rst as well as links to all of GitHub's features. This is the preferred online referral link for tqdm . The PyPI mirror which automatically serves the latest release built from README.rst as well as links to past releases. Many external web crawlers. Additionally (less maintained), there exists: A wiki which is publicly editable. The gh-pages project which is built from the gh-pages branch , which is built using asv . The gh-pages root which is built from a separate github.io repo .","title":"Updating Websites"},{"location":"contributing/#quick-dev-summary","text":"For experienced devs, once happy with local master: bump version in tqdm/_version.py test ( [python setup.py] make alltests ) git commit [--amend] # -m \"bump version\" git push wait for tests to pass a) in case of failure, fix and go back to (2) git tag vM.m.p && git push --tags [AUTO:TravisCI] [python setup.py] make distclean [AUTO:TravisCI] [python setup.py] make build [AUTO:TravisCI] upload to PyPI. either: a) [python setup.py] make pypi , or b) twine upload -s -i $(git config user.signingkey) dist/tqdm-* [AUTO:TravisCI] upload to docker hub: a) make -B docker b) docker push tqdm/tqdm:latest c) docker push tqdm/tqdm:$(docker run -i --rm tqdm/tqdm -v) [AUTO:TravisCI] upload to snapcraft: a) make snap , and b) snapcraft push tqdm*.snap --release stable Wait for travis to draft a new release on https://github.com/tqdm/tqdm/releases a) add helpful release notes b) [AUTO:TravisCI] attach dist/tqdm-* binaries (usually only *.whl* ) [SUB] run make in the wiki submodule to update release notes [SUB] run make deploy in the docs submodule to update website [SUB] accept the automated PR in the feedstock submodule to update conda Key: [AUTO:TravisCI] : Travis CI should automatically do this after git push --tags (6) [SUB] : Requires one-time make submodules to clone docs , wiki , and feedstock","title":"QUICK DEV SUMMARY"},{"location":"licence/","text":"tqdm is a product of collaborative work. Unless otherwise stated, all authors (see commit logs) retain copyright for their respective work, and release the work under the MIT licence (text below). Exceptions or notable authors are listed below in reverse chronological order: files: * MPLv2.0 2015-2020 (c) Casper da Costa-Luis casperdcl . files: tqdm/_tqdm.py MIT 2016 (c) PR #96 on behalf of Google Inc. files: tqdm/_tqdm.py setup.py README.rst MANIFEST.in .gitignore MIT 2013 (c) Noam Yorav-Raphael, original author. Mozilla Public Licence (MPL) v. 2.0 - Exhibit A # This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0. If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/. MIT License (MIT) # Copyright (c) 2013 noamraph Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"Licence"},{"location":"licence/#mozilla-public-licence-mpl-v-20-exhibit-a","text":"This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0. If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.","title":"Mozilla Public Licence (MPL) v. 2.0 - Exhibit A"},{"location":"licence/#mit-license-mit","text":"Copyright (c) 2013 noamraph Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"MIT License (MIT)"},{"location":"ports/","text":"Here is a non-exhaustive list of tqdm ports in various languages, with a partial mention if official and/or in development stage: Language Source Python tqdm/tqdm Official C++ tqdm/tqdm.cpp Official Pre-Alpha .NET damageboy/yaap C++ aminnj/cpptqdm C++ sizmailov/tqdm-cxx D ShigekiKarita/snck Elixir antipax/tqdm_elixir Go kinsey40/tqdm Go sbwhitepack/tqdm Julia cloud-oak/Tqdm.jl Node.js jhedin/ntqdm Perl perlancar/perl-tqdm Ruby powerpak/tqdm-ruby Ruby rscarvalho/tqdm-ruby","title":"Ports to Other Languages"},{"location":"releases/","text":"tqdm/tqdm Releases # v4.47.0 (2020-06-28) # whl | asc add contrib.discord (similar to contrib.telegram ) ( #976 ) add contrib.bells to auto-enable all extras add contrib.utils_worker for common slow tasks (e.g. web I/O) fix lazy large memory usage & discard unsent messages (unprocessed tasks) fix slow notebook imports ( #955 <- #709 ) fix gui TypeError on unknown len() ( #971 ) misc documentation/error message updates more succinct ImportError on missing ipywidgets ( #872 ) fix broken/deprecated link ( #981 ) add inline usage for contrib.discord and contrib.telegram misc framework updates add official py3.8 support ( #986 ) fix snap builds v4.46.1 (2020-06-03) # whl | asc fix missing sys.setcheckinterval in py3.9 ( #978 ) fix keras.TqdmCallback compatibility with tensorflow==2.2.0 ( #979 ) update documentation correct contrib.concurrent correct max_workers ( #977 ) drop prominent mention of xrange ( #965 ) minor linting v4.46.0 (2020-05-03) # whl | asc add contrib.telegram #949 <- #948 add bash tab completion and --comppath #946 , #947 <- #858 fix exception safety in external_write_mode #940 add requests examples ( #242 ) update documentation v4.45.0 (2020-04-02) # whl | asc propagate and close() on exceptions ( #926 <- #548 ) fix nested clear() rework nested close() ( #930 <- #924 <- #918 , #677 ) reduces screen flicker/blank space at the cost of ordering update all documentation & demos add and update tests dev framework: add pre-commit helper v4.44.1 (2020-03-29) # whl | asc fix _utils ImportError => DeprecationWarning ( #928 <- #927 ) v4.44.0 (2020-03-28) # whl | asc add automatic nrows and expose for manual override ( #918 -> #924 ) expose and warn about small chunksize in tqdm.contrib.concurrent.process_map ( #912 ) fix py2 file stream comparison ( #727 -> #730 ) deprecate utils._environ_cols_wrapper add and update tests add documentation v4.43.0 (2020-02-19) # whl fix notebook exceptions ( #669 <- #650 ) set_description() when disable=True contrib.concurrent : avoid unnecessary len(iterable) ( #893 ) update documentation clarify etymology ( #895 ) fix minor typo ( #890 ) update contributors and years update tests fix CI tests for PRs v4.42.1 (2020-02-03) # whl | asc support pandas==1.0.0 ( #780 , #555 ) minor metadata updates minor CI test update v4.42.0 (2020-01-25) # whl | asc notebook : update disable=None behaviour ( #880 ) tqdm.keras : support tensorflow.keras as well as keras ( #885 ) add contrib ( #882 ) tenumerate ( #840 <- #480 , #402 ) tzip <= zip tmap <= map add concurrent module thread_map <= concurrent.futures.ThreadPoolExecutor.map process_map <= concurrent.futures.ProcessPoolExecutor.map add itertools module ( #225 ) stub product add & update tests add & update documentation README examples/ update CI framework v4.41.1 (2020-01-05) # whl | asc keras module tidy and fixes fix batch_size=None ( #869 ) add missing pop('size') v4.41.0 (2019-12-20) # whl | asc trim on ncols overflow with ANSI handling ( #850 , #716 <- #690 ) add notebook.reset() ( #864 ) add keras.TqdmCallback ( #867 <- #835 ) documentation updates document newly added features (above) notebook ncols percentage/pixels ( #276 ) test updates test newly added features (above) add CI for win and osx ( #841 ) py2 threading v4.40.2 (2019-12-11) # whl | asc fix pandas unhashable func ( #862 -> #863 ) add tests v4.40.1 (2019-12-11) # whl | asc fix floating point imprecision raising errors ( #859 ) fix auto gh releases ( travis-ci/dpl#914 ) update CONTRIBUTING ( #84 (comment) ) v4.40.0 (2019-12-01) # whl | asc officially support float for n and total ( #802 ) notebook : use FloatProgress <= IntProgress ( #471 , #456 ) allow imprecision ( n <= total + epsilon ) ( #849 ) fix unicode bar format arguments ( #803 -> #851 ) add contrib submodule ( #815 ) add wrapattr , utils.CallbackIOWrapper , contrib.DummyTqdmFile ( #84 -> #844 ) update tests update documentation tidy automatic snap deployments minor doc update ( #854 ) v4.39.0 (2019-11-22) # whl | asc add pandas builtin operations check ( #843 <- #697 ) avoid unnecessary dedent ( #837 ) remove unneeded bar logic misc code tidy update documentation document default argument overriding ( #370 ) add missing isatty() ( #713 ) update badges add code of conduct update framework clean CI stages update CI default py3.6 => py3.7 automate snap releases ( #686 <- #685 ) v4.38.0 (2019-11-09) # whl | asc support lock_args for e.g. non-blocking intermediate writes ( #838 -> #839 ) use self.refresh() in more places add and update performance tests support args for TqdmDefaultWriteLock.acquire() fix colorama on win ( #678 , #764 ) framework updates CI cleanup move to stages (check/test/deploy) auto deploy notes deploy only on parent repo separate docker deploy update documentation sync/generation update examples update documentation add and update tests misc tidy and linting v4.37.0 (2019-10-31) # whl | asc potential future pandas fix ( #824 ) better unicode widechar support ( #803 -> #410 , #805 ) fix example/tqdm_wget unknown total ( #826 ) add stacklevel=2 to warnings ( #821 ) misc framework updates snapcraft version fix update issue/pr templates ( #830 ) update unit tests misc documentation updates update parallel (multiprocessing, ThreadPoolExecutor) example ( #407 ) add slides, video images add CII Best Practices badge add repology badge update badge icons v4.36.1 (2019-09-20) # whl | asc fix CLI entrypoint v4.36.0 (2019-09-17) # whl | asc expose more custom format params potential thread safety fix ( #548 ) update submodule architecture ( #198 -> #800 ) backward-compatibility expose utils rename main -> cli add/fix tests fix minor cached var optimisation gui partial upgrade ( #790 ) notebook upgrade ( #790 ) support {bar} in bar_format ( #594 ) inherit methods including set_*(refresh) ( #740 -> #741 ) ready for contrib releases ( #252 ) support custom bar_format with unknown total fix tqdm_notebook red block on explicit file=None ( #791 ) update notebook to fully support custom bar_format ( #594 , #649 ) misc tidy warnings linting update submodule contribution guide ( #252 ) parallel (py)make test fix Zenodo metadata update documentation pandas , notebook , gui ( #245 ) indentation update multiprocessing and multithreading examples ( #796 ) v4.35.0 (2019-08-24) # whl | asc add {bar} format specifier ( #623 -> #799 ) [width][type] add tests and documentation update performance tests v4.34.0 (2019-08-18) # whl | asc add leave=None convenience option for leave = position == 0 ensure nested completed bars respect leave=True ( #230 ) ensure nested bars are cleared before being moved up ( #795 ) support both and = syntax for CLI options ( #761 -> #774 ) misc documentation updates ( #778 , #782 ) fix/update tests update GitHub docker package deployment v4.33.0 (2019-08-08) # whl | asc fix pandas==0.25 API change ( #780 ) add contributor badges ( sourcerer ) fix py26 travis CI metadata fixes .zenodo.json CODEOWNERS GitHub package registry docker deployment minor linting documentation updates ( #773 ) v4.32.2 (2019-06-18) # whl | asc fix 'Set changed size during iteration' ( #481 -> #700 , #754 ) add tqdm.autonotebook check for $VSCODE_PID ( #747 -> #751 ) fix missing multiprocessing in Jython ( #698 ) make bool(tqdm(iter)) consistent with bool(iter) ( #353 -> #694 ) add and update unit tests add and update documentation & framework update notable contributors list update usage docstrings ( #714 , #715 ) add funding add awesome-python badge trove classifier update update demo notebook badges add JOSS DOI add Zenodo metadata move unnecessary root clutter v4.32.1 (2019-05-13) # whl | asc fix notebook with unknown total ( #743 ) v4.32.0 (2019-05-13) # whl | asc support unit_scale in notebook support negative update ( #432 , #545 ) add reset() function ( #547 , #545 ) add [python setup.py] make run add and update documentation example of dynamic usage ( #735 , #545 , #547 , #432 , #374 ) note writing issues ( #737 ) update badges add PyData2019 slides link add JOSS paper update manpages add docker install add snapcraft install notebooks: add binder, rename RMOTR => notebooks.ai ( #679 ) prettify and unify contributors/maintainers/authors CI and release framework updates add snapcraft snaps ( #647 ) add travis auto-deployment ( #685 ) PyPI releases docker devel/releases update deployment dev docs fix travis deploy pymake update .gitinore add & update unit tests automate more documentation v4.31.1 (2019-02-10) # whl | asc fix file.encoding==None caused by #598 ( #673 -> #676 ) add tests tidy code, update authors and tests add setup.py test to CI v4.31.0 (2019-02-09) # whl | asc Write bytes to stdout / stderr in py2 (https://bugs.python.org/issue21363, #589 -> #598 ) Add write_bytes parameter for py2/3 default override support custom bar characters vias ascii parameter ( #223 -> #227 ) implement, document and test custom bar spinners support custom bar_format with unknown total ( #282 -> #284 ) fix TypeError when unit_scale and unknown total document format_dict expose elapsed_s , remaining_s to bar_format add unit option to bar_format ( #368 ) auto README.rst generation framework add notes in CONTRIBUTING.md update tests update documentation misc code tidy v4.30.0 (2019-01-26) # whl | asc avoid moving when leave=False generalise nested bar tests add display() helper function add and expose format_dict ( #562 , #482 , #494 , #656 ) allow arbitrary keyword arguments for format_meter document format_dict overriding add tests for overriding related: #660 #587 add and tidy developer documentation fix py3 CLI pipe decoding error ( #663 ) framework overhaul (developing, testing, Travis CI updates) tidy code and style (flake8) setup.py refactor setup.py make add support for multi-line commands tidy and efficiency replace setup.py 's built-in make -> py-make>=0.1.9 ( #290 ) add requirements-dev.txt and extras_require[dev] add, update and tidy tests include interactive Jupyter demonstration ( #652 -> #659 ) update documentation add FAQ about py2 pipes ( #359 ) add badges update examples update authors v4.29.1 (2019-01-11) # whl | asc fix classmethod lock bug ( #617 : #457 -> #658 ) add unit test to prevent regression v4.29.0 (2019-01-06) # whl | asc Avoid global multiprocessing locks ( #611 -> #617 ) Add support for infinite iterables ( #651 ) Fix missing attr pos when used in multi-threaded environment ( #573 ) Do not join TMonitor if it is the current thread ( #613 -> #641 ) Add OpenBSD NIX support ( #638 ) Unit tests, general documentation fixes and tidying (e.g. #642 ) CI travis improvements py37-dev -> py37 ( #622 ) fix py26 v4.28.1 (2018-10-21) # whl | asc fix --manpath file not found expose main():argv add unit tests release framework tidy update . gitattributes remove deprecated make / dist options v4.28.0 (2018-10-20) # whl | asc remove installation of man pages by default ( #460 , #628 ) CLI:add --manpath option ( #629 ) documentation additions and fixes v4.27.0 (2018-10-15) # whl | asc fix str.isnumeric #605 fix WeakSet KeyError #548 , #553 , #596 -> #607 stop tqdm_notebook description truncation #582 -> #599 include unit_scale for rate #608 add auto -> nowarning autonotebook add better postfix numeric formatting #621 minor refactoring #609 -> #616 update documentation add unit tests fix py26 CI v4.26.0 (2018-09-11) # whl | asc fix smoothing ( #566 -> #601 ) pandas updates address the FutureWarning in pandas , drop pandas test in py34, add in py37 ( #603 ) support pandas axis='index' or 'columns' ( #570 ) minor documentation updates ( #597 , #600 , #606 ) developer notes v4.25.0 (2018-08-20) # whl | asc stop monitor on shutdown ( #571 , #572 ) fix find_packages() for submodules ( #593 ) properly add autonotebook ( #586 , 1cf3393) ignore ANSI escape codes in the bar length calculation ( #450 , #591 -> #592 ) update documentation ( #243 ) v4.24.0 (2018-07-26) # whl | asc autonotebook submodule for automatic selection of notebook/CLI bar ( #443 , #508 ) update/add pandas() example documentation ( #474 ) NameError:IntProgress changed to a more helpful ImportError ( #187 , #451 , #558 ) support bool() cast when disable=True ( #574 ) fix format_sizeof hundreds rounding ( #579 -> #581 ) ensure URLs in documentation are secure ( https ) v4.23.4 (2018-05-22) # whl | asc Support pandas 0.23.0 core.groupby module layout ( #555 -> #554 ) Add python_requires to help pip ( #557 ) minor maintenance updates CI updates: drop travis py33 due to tox ( tox-dev/tox#648 ) minor code tidy v4.23.3 (2018-05-22) # whl | asc suppress 10 second warning (refix #323 ) v4.23.2 (2018-05-02) # whl | asc minor import syntax fix #496 re-fix nested overlaps #477 update documentation and examples code tidy and abstraction v4.23.1 (2018-04-25) # whl | asc fix AttributeError s ( #546 ) pos on initialisation ( #323 , #510 -> #544 ) fp on write() ( #383 ) fix py34 CI update documentation v4.23.0 (2018-04-15) # whl | asc Fix disable=True where iterable has no len() and is not None ( #539 ) Add ncols to specify tqdm_notebook bar width ( #276 -> #292 ) allow custom pandas total ( #364 -> #535 ) Add progress_apply for pandas.(Series|DataFrame).(rolling|expanding) ( #530 -> #537 ) unit tests, pep8 tidy postfix non- dict documentation note v4.22.0 (2018-04-11) # whl | asc allow direct non-string assignment to postfix member (lists, dicts, etc) ( #382 -> #534 ) documentation updates unit tests v4.21.0 (2018-04-08) # whl | asc fix #532 write() with manual position more robust free position finding add TqdmWarning base class fix GUI __del__() add TqdmExperimentalWarning add, tidy & fix unit tests documentation wiki release notes update contributors fix 7zx example v4.20.0 (2018-04-03) # whl | asc pandas wrapper: remove *args and add better total handling ( #244 , #299 , #322 , #366 -> #524 ) document windows unicode know issues ( #454 ) suppress RuntimeError: Set changed size during iteration -> TqdmSynchronisationWarning ( #481 ) v4.19.9 (2018-03-27) # whl | asc fix monitor thread termination and update tests ( #527 ) v4.19.8 (2018-03-27) # whl | asc fix monitoring thread issues avoid uninitialised instance manipulation ( #493 ) fix thread starting RuntimeError ( #522 -> #523 ) these release notes ( #529 ) v4.19.6 (2018-02-27) # whl | asc CLI improvements --bytes implies --unit B --unit_scale --unit_divisor 1024 ( #503 ) allow hyphens in CLI arguments ( #511 ) synchronisation: fix for sem_open on aarch64 ( #513 ) framework update CI/tests, year 2018, py37, badges, documentation v4.19.5 (2017-12-10) # whl | asc multiprocess/lock fixes ( #457 ) set_description in notebook ( #345 -> #475 ) minor tidy ( #476 ) documentation updates v4.19.4 (2017-10-15) # whl | asc | gz | asc fix Lock:NotImplementedError on certain systems ( #466 -> #468 ) use recursive locks ( #469 -> #468 ) fix deadlocks tidy ( #448 ) flush() on moveto() ( #398 -> #399 , #420 , #467 ) update tests and benchmarks v4.19.2 (2017-10-08) # whl | asc | gz | asc flush() on refresh() ( #459 from #317 ) status printer updates ( #331 ) use sp() in refresh() remove redundant clear():nomove=False misc minor documentation updates unit tests v4.19.1 (2017-10-03) # whl | asc | gz | asc rate_(no)inv(_fmt) ( #72 , b228bc3) __repr__() tidy ( #389 ) fix write() before initialisation AttributeError: _lock ( #457 ) man pages documentation updates v4.18.0 (2017-09-30) # whl | asc | gz | asc Thread safety! ( #285 -> #291 -> #329 , #407 , #417 ) Ease redirection of sys.stdout / stderr ( #422 ) Minor internal stream bugfix ( #439 ) AttributeError fixes ( #323 , #324 , #418 ) Related to: Misc bugs ( #334 ) concurrent.futures ( #97 ) Multi- tqdm ( #143 ) flush() and refresh() ( #331 ) Newline on refresh() ( #361 ) Nested trees ( #384 ) Manually positioned nested bars clearing ( #385 ) v4.17.1 (2017-09-26) # whl | asc | gz | asc initialise n even when disabled ( #438 ) better unicode detection ( #437 ) __repr__() bugfix ( #441 ) v4.17.0 (2017-09-20) # whl | asc | gz | asc easier redirect of stdout ( #426 -> #431 ) cls.external_write_mode() @contextmanager refresh=True for set_description / update ( _str ) ( #317 -> #377 ) v4.16.0 (2017-09-20) # whl | asc | gz | asc more formatting control ( #347 -> #362 ) set_postfix_str() , set_description_str() move \": \" to bar_format complements #266 , #270 better CLI support (e.g. hyphenated paths) ( #421 -> #424 ) more unit tests ( #411 ) upgrade to pypy2/3-5.8.0 add py37-dev doc updates v4.15.0 (2017-07-29) # whl | asc minor fixes ( #395 ) minor documentation updates ( #400 , #401 , #412 ) better pandas support ( #351 -> #409 ) Jupyter notebook fix ( #352 , #369 -> #373 , #405 ) optimise setcheckinterval / setswitchinterval ( #376 ) add unit_scale ( #273 , #295 -> #378 ) v4.14.0 (2017-07-29) # add unit_divisor #354 -> #356 update examples v4.13.0 (2017-05-29) # whl | asc support unknown systems https://github.com/warner/magic-wormhole/issues/158, #76 , #344 -> #390 support nested/multi-bars better #384 , #285 , #329 -> #385 ease redirection of output (default: sys.stderr -> None ) https://github.com/xonsh/xonsh/issues/2058, #329 , #275 -> #293 add examples/redirect_print.py minor documentation updates v4.12.0 (2017-05-29) # whl | asc fix monitor race condition #338 -> #339 add explicit NetBSD support #344 documentation tidy v4.11.2 (2017-01-24) # whl | asc | gz | asc thread safety #332 address DeprecationWarning #319 -> #326 version extra #328 -> #330 security fix ( CVE-2016-10075 ) add non-master branch name minor safety minor documentation and comments v4.11.1 (2017-01-23) # whl | asc | gz | asc Officially support Python 3.6, addressing #333 v4.11.0 (2017-01-12) # whl | gz postfix argument added #266 -> #270 fix tests for numpy #272 -> #302 PyPy3 #318 -> #325 7z extraction example script new logo #315 hit counter with logo colours and stats documentation updates safer setup.py Makefile emulation better github contributions integrations and Code of Conduct #310 v4.10.0 (2016-11-12) # gz | zip fix maxinterval to adjust miniters to mininterval #249 minor bugfixes (eg #288 ) misc optimisations, unit tests, and benchmarks (eg #298 ) documentation updates v4.9.0 (2016-10-31) # gz | zip monitoring thread to automatically to adjust miniters and avoid exceeding maxinterval test race conditions kill on KeyboardInterrupt + instant refresh low performance overhead, option to disable new CLI argument: --bytes to count chars disable automatically on non-TTY ( #281 ) fixed refresh() and clear() if disabled ( #286 ) misc fixes documentation unit tests optimisations, style fixes codacy badge safety and warning suppression ignore coverall failures ( #283 ) fix broken link in README ( #262 ) Fix time() in refresh() + avoid write() races ( #264 ) Fix __repr__() #269 Fix update(0) causing ZeroDivisionError (on first call) #268 Faster simple bar for perf test ( #257 ) cleaner tqdm_notebook exit when not run in a notebook ( #267 ) Disable coveralls because of duplicate comments on github ( #263 ) Migrate codecov config -> codecov.yml v4.8.4 (2016-08-17) # whl | gz 14% overhead reduction fix exception when closing tqdm_notebook without a total support more pandas modules pandas.Series.progress_map pandas.DataFrame.progress_applymap Panel.progress_apply PanelGroupBy.progress_apply GroupBy.progress_aggregate GroupBy.progress_transform faster CI builds misc documentation update and link to wiki v4.8.1 (2016-07-25) # custom tqdm warning/exceptions tests now multiprocessed and include pandas v4.8.0 (2016-07-25) # tqdm.pandas classmethod replaces tqdm_pandas function (deprecated) ipython aliased imports fixes write without any instances readme update examples update test fixes and updates v4.7.6 (2016-06-30) # support for pandas series support for numpy arrays tidy & coverage v4.7.4 (2016-06-04) # whl | gz pandas.DataFrame.apply support tqdm_notebook.write() tqdm_gui.write() misc notebook fixes delay notebook imports (>80% reduction in import time when unused) optional colorama only on windows documentation tidy more & faster tests v4.7.0 (2016-05-15) # whl | gz CLI custom delimiter support More robust CLI argument parsing either one or two - preceding kwargs (eg -ascii or --ascii ) no positional args (so no need to quote multi-word -desc for example) bool kwargs with implicit value= True still supported optional = sign after kwargs tests doc updates, badges pyversions, doi, licence, github v4.6.2 (2016-05-15) # whl | gz | exe | zip Fix warnings due to IPython/Jupyter widget v4.6.1 (2016-05-15) # whl | gz | exe | zip add IPython/Jupyter support fix {bar} length breaking display when using custom bar_format add a no inversion rate formatting for bar_format (i.e., always show it/s and never s/it ) v4.5.0 (2016-04-25) # whl | gz | zip print messages within (nested) loops using tqdm.write(...) v4.4.3 (2016-04-24) # whl | gz | zip remove docopt dependency for CLI re-added update(0) ability to trigger refresh minor fixes re-added (OSI approved) licence to source dev versioning auto-fallback slight speed optimisation tests documentation v4.4.1 (2016-04-22) # whl | gz | zip Module execution in CLI pipes! tqdm executable documentation tests MSYS aded to supported envs better VTE support dev versioning tests v4.2.0 (2016-04-22) # whl | gz | zip MPL licence! slightly updated logo update examples update(0) allowed better VTE support ascii fallback when unicode not available v4.0.0 (2016-02-04) # whl | gz | zip automate nested deprecate nested add manual override control with position documentation and example updates, coverage and tests make leave==True by default (was False ) v3.8.0 (2016-01-31) # whl | gz | zip update(n<1) raises error sanitise and update examples and README fix setup.py encoding error remove py32 from Travis changelog more accessible from README v3.7.1 (2016-01-13) # whl | gz | exe | zip Added more OS support (FreeBSD, Solaris/SunOS) Added Python3.5 support and tests Added IronPython2.7 support Fix Makefile management for Python3 Added relative timing for tests More stable smoothed ETA Refactoring everything into one big tqdm class for even more subclassing fun v3.6.0 (2015-12-31) # whl | gz | zip Added support for \"restarting\" a progressbar after a long pause without making the iteration rate go haywire. Simply call the unpause() method on the tqdm instance that is about to be restarted. Can also start tqdm skipping a number of steps specified by initial (without bias-ing ETA). v3.5.0 (2015-12-31) # whl | gz | zip Fully customisable output format using the bar_format keyword argument. Valid strings: bar, n, n_fmt, total, total_fmt, percentage, rate, rate_fmt, elapsed, remaining, l_bar, r_bar, desc Example: bar_format='{desc}{bar}{rate:03.3d}' Default: '{l_bar}{bar}{r_bar}', where l_bar is '{desc}{percentage:3.0f}%|' and r_bar is '| {n_fmt}/{total_fmt} [{elapsed_str}<{remaining_str}, {rate_fmt}]'. Solaris, FreeBSD support mentioned Link redirects circumvented v3.3.0 (2015-12-31) # whl | gz | zip Support added for pandas apply => progress_apply 80-char width when running interactive help() update examples using with syntax v3.1.4 (2015-11-28) # whl | gz | exe | zip Added smoothing and maxinterval features for smooth progress bar and rate for unconstant, variable changes in update times, and abstracted gui to its own class and file. Also added a performance test to prevent performance regressions. v2.2.4 (2015-11-08) # whl | gz | exe | zip Added the dynamic management of the bar on window resize, plus a better internal testing/build workflow using python setup.py make [alias] . v2.0.0 (2015-10-11) # whl | gz | exe | zip First public release of the next generation of tqdm, with lots of new features, more speed, more unit testing, more coverage (100% yeah!), more beer and coffee. This release can also be downloaded on PyPi here .","title":"Release History"},{"location":"releases/#tqdmtqdm-releases","text":"","title":"tqdm/tqdm Releases"},{"location":"releases/#v4470-2020-06-28","text":"whl | asc add contrib.discord (similar to contrib.telegram ) ( #976 ) add contrib.bells to auto-enable all extras add contrib.utils_worker for common slow tasks (e.g. web I/O) fix lazy large memory usage & discard unsent messages (unprocessed tasks) fix slow notebook imports ( #955 <- #709 ) fix gui TypeError on unknown len() ( #971 ) misc documentation/error message updates more succinct ImportError on missing ipywidgets ( #872 ) fix broken/deprecated link ( #981 ) add inline usage for contrib.discord and contrib.telegram misc framework updates add official py3.8 support ( #986 ) fix snap builds","title":"v4.47.0 (2020-06-28)"},{"location":"releases/#v4461-2020-06-03","text":"whl | asc fix missing sys.setcheckinterval in py3.9 ( #978 ) fix keras.TqdmCallback compatibility with tensorflow==2.2.0 ( #979 ) update documentation correct contrib.concurrent correct max_workers ( #977 ) drop prominent mention of xrange ( #965 ) minor linting","title":"v4.46.1 (2020-06-03)"},{"location":"releases/#v4460-2020-05-03","text":"whl | asc add contrib.telegram #949 <- #948 add bash tab completion and --comppath #946 , #947 <- #858 fix exception safety in external_write_mode #940 add requests examples ( #242 ) update documentation","title":"v4.46.0 (2020-05-03)"},{"location":"releases/#v4450-2020-04-02","text":"whl | asc propagate and close() on exceptions ( #926 <- #548 ) fix nested clear() rework nested close() ( #930 <- #924 <- #918 , #677 ) reduces screen flicker/blank space at the cost of ordering update all documentation & demos add and update tests dev framework: add pre-commit helper","title":"v4.45.0 (2020-04-02)"},{"location":"releases/#v4441-2020-03-29","text":"whl | asc fix _utils ImportError => DeprecationWarning ( #928 <- #927 )","title":"v4.44.1 (2020-03-29)"},{"location":"releases/#v4440-2020-03-28","text":"whl | asc add automatic nrows and expose for manual override ( #918 -> #924 ) expose and warn about small chunksize in tqdm.contrib.concurrent.process_map ( #912 ) fix py2 file stream comparison ( #727 -> #730 ) deprecate utils._environ_cols_wrapper add and update tests add documentation","title":"v4.44.0 (2020-03-28)"},{"location":"releases/#v4430-2020-02-19","text":"whl fix notebook exceptions ( #669 <- #650 ) set_description() when disable=True contrib.concurrent : avoid unnecessary len(iterable) ( #893 ) update documentation clarify etymology ( #895 ) fix minor typo ( #890 ) update contributors and years update tests fix CI tests for PRs","title":"v4.43.0 (2020-02-19)"},{"location":"releases/#v4421-2020-02-03","text":"whl | asc support pandas==1.0.0 ( #780 , #555 ) minor metadata updates minor CI test update","title":"v4.42.1 (2020-02-03)"},{"location":"releases/#v4420-2020-01-25","text":"whl | asc notebook : update disable=None behaviour ( #880 ) tqdm.keras : support tensorflow.keras as well as keras ( #885 ) add contrib ( #882 ) tenumerate ( #840 <- #480 , #402 ) tzip <= zip tmap <= map add concurrent module thread_map <= concurrent.futures.ThreadPoolExecutor.map process_map <= concurrent.futures.ProcessPoolExecutor.map add itertools module ( #225 ) stub product add & update tests add & update documentation README examples/ update CI framework","title":"v4.42.0 (2020-01-25)"},{"location":"releases/#v4411-2020-01-05","text":"whl | asc keras module tidy and fixes fix batch_size=None ( #869 ) add missing pop('size')","title":"v4.41.1 (2020-01-05)"},{"location":"releases/#v4410-2019-12-20","text":"whl | asc trim on ncols overflow with ANSI handling ( #850 , #716 <- #690 ) add notebook.reset() ( #864 ) add keras.TqdmCallback ( #867 <- #835 ) documentation updates document newly added features (above) notebook ncols percentage/pixels ( #276 ) test updates test newly added features (above) add CI for win and osx ( #841 ) py2 threading","title":"v4.41.0 (2019-12-20)"},{"location":"releases/#v4402-2019-12-11","text":"whl | asc fix pandas unhashable func ( #862 -> #863 ) add tests","title":"v4.40.2 (2019-12-11)"},{"location":"releases/#v4401-2019-12-11","text":"whl | asc fix floating point imprecision raising errors ( #859 ) fix auto gh releases ( travis-ci/dpl#914 ) update CONTRIBUTING ( #84 (comment) )","title":"v4.40.1 (2019-12-11)"},{"location":"releases/#v4400-2019-12-01","text":"whl | asc officially support float for n and total ( #802 ) notebook : use FloatProgress <= IntProgress ( #471 , #456 ) allow imprecision ( n <= total + epsilon ) ( #849 ) fix unicode bar format arguments ( #803 -> #851 ) add contrib submodule ( #815 ) add wrapattr , utils.CallbackIOWrapper , contrib.DummyTqdmFile ( #84 -> #844 ) update tests update documentation tidy automatic snap deployments minor doc update ( #854 )","title":"v4.40.0 (2019-12-01)"},{"location":"releases/#v4390-2019-11-22","text":"whl | asc add pandas builtin operations check ( #843 <- #697 ) avoid unnecessary dedent ( #837 ) remove unneeded bar logic misc code tidy update documentation document default argument overriding ( #370 ) add missing isatty() ( #713 ) update badges add code of conduct update framework clean CI stages update CI default py3.6 => py3.7 automate snap releases ( #686 <- #685 )","title":"v4.39.0 (2019-11-22)"},{"location":"releases/#v4380-2019-11-09","text":"whl | asc support lock_args for e.g. non-blocking intermediate writes ( #838 -> #839 ) use self.refresh() in more places add and update performance tests support args for TqdmDefaultWriteLock.acquire() fix colorama on win ( #678 , #764 ) framework updates CI cleanup move to stages (check/test/deploy) auto deploy notes deploy only on parent repo separate docker deploy update documentation sync/generation update examples update documentation add and update tests misc tidy and linting","title":"v4.38.0 (2019-11-09)"},{"location":"releases/#v4370-2019-10-31","text":"whl | asc potential future pandas fix ( #824 ) better unicode widechar support ( #803 -> #410 , #805 ) fix example/tqdm_wget unknown total ( #826 ) add stacklevel=2 to warnings ( #821 ) misc framework updates snapcraft version fix update issue/pr templates ( #830 ) update unit tests misc documentation updates update parallel (multiprocessing, ThreadPoolExecutor) example ( #407 ) add slides, video images add CII Best Practices badge add repology badge update badge icons","title":"v4.37.0 (2019-10-31)"},{"location":"releases/#v4361-2019-09-20","text":"whl | asc fix CLI entrypoint","title":"v4.36.1 (2019-09-20)"},{"location":"releases/#v4360-2019-09-17","text":"whl | asc expose more custom format params potential thread safety fix ( #548 ) update submodule architecture ( #198 -> #800 ) backward-compatibility expose utils rename main -> cli add/fix tests fix minor cached var optimisation gui partial upgrade ( #790 ) notebook upgrade ( #790 ) support {bar} in bar_format ( #594 ) inherit methods including set_*(refresh) ( #740 -> #741 ) ready for contrib releases ( #252 ) support custom bar_format with unknown total fix tqdm_notebook red block on explicit file=None ( #791 ) update notebook to fully support custom bar_format ( #594 , #649 ) misc tidy warnings linting update submodule contribution guide ( #252 ) parallel (py)make test fix Zenodo metadata update documentation pandas , notebook , gui ( #245 ) indentation update multiprocessing and multithreading examples ( #796 )","title":"v4.36.0 (2019-09-17)"},{"location":"releases/#v4350-2019-08-24","text":"whl | asc add {bar} format specifier ( #623 -> #799 ) [width][type] add tests and documentation update performance tests","title":"v4.35.0 (2019-08-24)"},{"location":"releases/#v4340-2019-08-18","text":"whl | asc add leave=None convenience option for leave = position == 0 ensure nested completed bars respect leave=True ( #230 ) ensure nested bars are cleared before being moved up ( #795 ) support both and = syntax for CLI options ( #761 -> #774 ) misc documentation updates ( #778 , #782 ) fix/update tests update GitHub docker package deployment","title":"v4.34.0 (2019-08-18)"},{"location":"releases/#v4330-2019-08-08","text":"whl | asc fix pandas==0.25 API change ( #780 ) add contributor badges ( sourcerer ) fix py26 travis CI metadata fixes .zenodo.json CODEOWNERS GitHub package registry docker deployment minor linting documentation updates ( #773 )","title":"v4.33.0 (2019-08-08)"},{"location":"releases/#v4322-2019-06-18","text":"whl | asc fix 'Set changed size during iteration' ( #481 -> #700 , #754 ) add tqdm.autonotebook check for $VSCODE_PID ( #747 -> #751 ) fix missing multiprocessing in Jython ( #698 ) make bool(tqdm(iter)) consistent with bool(iter) ( #353 -> #694 ) add and update unit tests add and update documentation & framework update notable contributors list update usage docstrings ( #714 , #715 ) add funding add awesome-python badge trove classifier update update demo notebook badges add JOSS DOI add Zenodo metadata move unnecessary root clutter","title":"v4.32.2 (2019-06-18)"},{"location":"releases/#v4321-2019-05-13","text":"whl | asc fix notebook with unknown total ( #743 )","title":"v4.32.1 (2019-05-13)"},{"location":"releases/#v4320-2019-05-13","text":"whl | asc support unit_scale in notebook support negative update ( #432 , #545 ) add reset() function ( #547 , #545 ) add [python setup.py] make run add and update documentation example of dynamic usage ( #735 , #545 , #547 , #432 , #374 ) note writing issues ( #737 ) update badges add PyData2019 slides link add JOSS paper update manpages add docker install add snapcraft install notebooks: add binder, rename RMOTR => notebooks.ai ( #679 ) prettify and unify contributors/maintainers/authors CI and release framework updates add snapcraft snaps ( #647 ) add travis auto-deployment ( #685 ) PyPI releases docker devel/releases update deployment dev docs fix travis deploy pymake update .gitinore add & update unit tests automate more documentation","title":"v4.32.0 (2019-05-13)"},{"location":"releases/#v4311-2019-02-10","text":"whl | asc fix file.encoding==None caused by #598 ( #673 -> #676 ) add tests tidy code, update authors and tests add setup.py test to CI","title":"v4.31.1 (2019-02-10)"},{"location":"releases/#v4310-2019-02-09","text":"whl | asc Write bytes to stdout / stderr in py2 (https://bugs.python.org/issue21363, #589 -> #598 ) Add write_bytes parameter for py2/3 default override support custom bar characters vias ascii parameter ( #223 -> #227 ) implement, document and test custom bar spinners support custom bar_format with unknown total ( #282 -> #284 ) fix TypeError when unit_scale and unknown total document format_dict expose elapsed_s , remaining_s to bar_format add unit option to bar_format ( #368 ) auto README.rst generation framework add notes in CONTRIBUTING.md update tests update documentation misc code tidy","title":"v4.31.0 (2019-02-09)"},{"location":"releases/#v4300-2019-01-26","text":"whl | asc avoid moving when leave=False generalise nested bar tests add display() helper function add and expose format_dict ( #562 , #482 , #494 , #656 ) allow arbitrary keyword arguments for format_meter document format_dict overriding add tests for overriding related: #660 #587 add and tidy developer documentation fix py3 CLI pipe decoding error ( #663 ) framework overhaul (developing, testing, Travis CI updates) tidy code and style (flake8) setup.py refactor setup.py make add support for multi-line commands tidy and efficiency replace setup.py 's built-in make -> py-make>=0.1.9 ( #290 ) add requirements-dev.txt and extras_require[dev] add, update and tidy tests include interactive Jupyter demonstration ( #652 -> #659 ) update documentation add FAQ about py2 pipes ( #359 ) add badges update examples update authors","title":"v4.30.0 (2019-01-26)"},{"location":"releases/#v4291-2019-01-11","text":"whl | asc fix classmethod lock bug ( #617 : #457 -> #658 ) add unit test to prevent regression","title":"v4.29.1 (2019-01-11)"},{"location":"releases/#v4290-2019-01-06","text":"whl | asc Avoid global multiprocessing locks ( #611 -> #617 ) Add support for infinite iterables ( #651 ) Fix missing attr pos when used in multi-threaded environment ( #573 ) Do not join TMonitor if it is the current thread ( #613 -> #641 ) Add OpenBSD NIX support ( #638 ) Unit tests, general documentation fixes and tidying (e.g. #642 ) CI travis improvements py37-dev -> py37 ( #622 ) fix py26","title":"v4.29.0 (2019-01-06)"},{"location":"releases/#v4281-2018-10-21","text":"whl | asc fix --manpath file not found expose main():argv add unit tests release framework tidy update . gitattributes remove deprecated make / dist options","title":"v4.28.1 (2018-10-21)"},{"location":"releases/#v4280-2018-10-20","text":"whl | asc remove installation of man pages by default ( #460 , #628 ) CLI:add --manpath option ( #629 ) documentation additions and fixes","title":"v4.28.0 (2018-10-20)"},{"location":"releases/#v4270-2018-10-15","text":"whl | asc fix str.isnumeric #605 fix WeakSet KeyError #548 , #553 , #596 -> #607 stop tqdm_notebook description truncation #582 -> #599 include unit_scale for rate #608 add auto -> nowarning autonotebook add better postfix numeric formatting #621 minor refactoring #609 -> #616 update documentation add unit tests fix py26 CI","title":"v4.27.0 (2018-10-15)"},{"location":"releases/#v4260-2018-09-11","text":"whl | asc fix smoothing ( #566 -> #601 ) pandas updates address the FutureWarning in pandas , drop pandas test in py34, add in py37 ( #603 ) support pandas axis='index' or 'columns' ( #570 ) minor documentation updates ( #597 , #600 , #606 ) developer notes","title":"v4.26.0 (2018-09-11)"},{"location":"releases/#v4250-2018-08-20","text":"whl | asc stop monitor on shutdown ( #571 , #572 ) fix find_packages() for submodules ( #593 ) properly add autonotebook ( #586 , 1cf3393) ignore ANSI escape codes in the bar length calculation ( #450 , #591 -> #592 ) update documentation ( #243 )","title":"v4.25.0 (2018-08-20)"},{"location":"releases/#v4240-2018-07-26","text":"whl | asc autonotebook submodule for automatic selection of notebook/CLI bar ( #443 , #508 ) update/add pandas() example documentation ( #474 ) NameError:IntProgress changed to a more helpful ImportError ( #187 , #451 , #558 ) support bool() cast when disable=True ( #574 ) fix format_sizeof hundreds rounding ( #579 -> #581 ) ensure URLs in documentation are secure ( https )","title":"v4.24.0 (2018-07-26)"},{"location":"releases/#v4234-2018-05-22","text":"whl | asc Support pandas 0.23.0 core.groupby module layout ( #555 -> #554 ) Add python_requires to help pip ( #557 ) minor maintenance updates CI updates: drop travis py33 due to tox ( tox-dev/tox#648 ) minor code tidy","title":"v4.23.4 (2018-05-22)"},{"location":"releases/#v4233-2018-05-22","text":"whl | asc suppress 10 second warning (refix #323 )","title":"v4.23.3 (2018-05-22)"},{"location":"releases/#v4232-2018-05-02","text":"whl | asc minor import syntax fix #496 re-fix nested overlaps #477 update documentation and examples code tidy and abstraction","title":"v4.23.2 (2018-05-02)"},{"location":"releases/#v4231-2018-04-25","text":"whl | asc fix AttributeError s ( #546 ) pos on initialisation ( #323 , #510 -> #544 ) fp on write() ( #383 ) fix py34 CI update documentation","title":"v4.23.1 (2018-04-25)"},{"location":"releases/#v4230-2018-04-15","text":"whl | asc Fix disable=True where iterable has no len() and is not None ( #539 ) Add ncols to specify tqdm_notebook bar width ( #276 -> #292 ) allow custom pandas total ( #364 -> #535 ) Add progress_apply for pandas.(Series|DataFrame).(rolling|expanding) ( #530 -> #537 ) unit tests, pep8 tidy postfix non- dict documentation note","title":"v4.23.0 (2018-04-15)"},{"location":"releases/#v4220-2018-04-11","text":"whl | asc allow direct non-string assignment to postfix member (lists, dicts, etc) ( #382 -> #534 ) documentation updates unit tests","title":"v4.22.0 (2018-04-11)"},{"location":"releases/#v4210-2018-04-08","text":"whl | asc fix #532 write() with manual position more robust free position finding add TqdmWarning base class fix GUI __del__() add TqdmExperimentalWarning add, tidy & fix unit tests documentation wiki release notes update contributors fix 7zx example","title":"v4.21.0 (2018-04-08)"},{"location":"releases/#v4200-2018-04-03","text":"whl | asc pandas wrapper: remove *args and add better total handling ( #244 , #299 , #322 , #366 -> #524 ) document windows unicode know issues ( #454 ) suppress RuntimeError: Set changed size during iteration -> TqdmSynchronisationWarning ( #481 )","title":"v4.20.0 (2018-04-03)"},{"location":"releases/#v4199-2018-03-27","text":"whl | asc fix monitor thread termination and update tests ( #527 )","title":"v4.19.9 (2018-03-27)"},{"location":"releases/#v4198-2018-03-27","text":"whl | asc fix monitoring thread issues avoid uninitialised instance manipulation ( #493 ) fix thread starting RuntimeError ( #522 -> #523 ) these release notes ( #529 )","title":"v4.19.8 (2018-03-27)"},{"location":"releases/#v4196-2018-02-27","text":"whl | asc CLI improvements --bytes implies --unit B --unit_scale --unit_divisor 1024 ( #503 ) allow hyphens in CLI arguments ( #511 ) synchronisation: fix for sem_open on aarch64 ( #513 ) framework update CI/tests, year 2018, py37, badges, documentation","title":"v4.19.6 (2018-02-27)"},{"location":"releases/#v4195-2017-12-10","text":"whl | asc multiprocess/lock fixes ( #457 ) set_description in notebook ( #345 -> #475 ) minor tidy ( #476 ) documentation updates","title":"v4.19.5 (2017-12-10)"},{"location":"releases/#v4194-2017-10-15","text":"whl | asc | gz | asc fix Lock:NotImplementedError on certain systems ( #466 -> #468 ) use recursive locks ( #469 -> #468 ) fix deadlocks tidy ( #448 ) flush() on moveto() ( #398 -> #399 , #420 , #467 ) update tests and benchmarks","title":"v4.19.4 (2017-10-15)"},{"location":"releases/#v4192-2017-10-08","text":"whl | asc | gz | asc flush() on refresh() ( #459 from #317 ) status printer updates ( #331 ) use sp() in refresh() remove redundant clear():nomove=False misc minor documentation updates unit tests","title":"v4.19.2 (2017-10-08)"},{"location":"releases/#v4191-2017-10-03","text":"whl | asc | gz | asc rate_(no)inv(_fmt) ( #72 , b228bc3) __repr__() tidy ( #389 ) fix write() before initialisation AttributeError: _lock ( #457 ) man pages documentation updates","title":"v4.19.1 (2017-10-03)"},{"location":"releases/#v4180-2017-09-30","text":"whl | asc | gz | asc Thread safety! ( #285 -> #291 -> #329 , #407 , #417 ) Ease redirection of sys.stdout / stderr ( #422 ) Minor internal stream bugfix ( #439 ) AttributeError fixes ( #323 , #324 , #418 ) Related to: Misc bugs ( #334 ) concurrent.futures ( #97 ) Multi- tqdm ( #143 ) flush() and refresh() ( #331 ) Newline on refresh() ( #361 ) Nested trees ( #384 ) Manually positioned nested bars clearing ( #385 )","title":"v4.18.0 (2017-09-30)"},{"location":"releases/#v4171-2017-09-26","text":"whl | asc | gz | asc initialise n even when disabled ( #438 ) better unicode detection ( #437 ) __repr__() bugfix ( #441 )","title":"v4.17.1 (2017-09-26)"},{"location":"releases/#v4170-2017-09-20","text":"whl | asc | gz | asc easier redirect of stdout ( #426 -> #431 ) cls.external_write_mode() @contextmanager refresh=True for set_description / update ( _str ) ( #317 -> #377 )","title":"v4.17.0 (2017-09-20)"},{"location":"releases/#v4160-2017-09-20","text":"whl | asc | gz | asc more formatting control ( #347 -> #362 ) set_postfix_str() , set_description_str() move \": \" to bar_format complements #266 , #270 better CLI support (e.g. hyphenated paths) ( #421 -> #424 ) more unit tests ( #411 ) upgrade to pypy2/3-5.8.0 add py37-dev doc updates","title":"v4.16.0 (2017-09-20)"},{"location":"releases/#v4150-2017-07-29","text":"whl | asc minor fixes ( #395 ) minor documentation updates ( #400 , #401 , #412 ) better pandas support ( #351 -> #409 ) Jupyter notebook fix ( #352 , #369 -> #373 , #405 ) optimise setcheckinterval / setswitchinterval ( #376 ) add unit_scale ( #273 , #295 -> #378 )","title":"v4.15.0 (2017-07-29)"},{"location":"releases/#v4140-2017-07-29","text":"add unit_divisor #354 -> #356 update examples","title":"v4.14.0 (2017-07-29)"},{"location":"releases/#v4130-2017-05-29","text":"whl | asc support unknown systems https://github.com/warner/magic-wormhole/issues/158, #76 , #344 -> #390 support nested/multi-bars better #384 , #285 , #329 -> #385 ease redirection of output (default: sys.stderr -> None ) https://github.com/xonsh/xonsh/issues/2058, #329 , #275 -> #293 add examples/redirect_print.py minor documentation updates","title":"v4.13.0 (2017-05-29)"},{"location":"releases/#v4120-2017-05-29","text":"whl | asc fix monitor race condition #338 -> #339 add explicit NetBSD support #344 documentation tidy","title":"v4.12.0 (2017-05-29)"},{"location":"releases/#v4112-2017-01-24","text":"whl | asc | gz | asc thread safety #332 address DeprecationWarning #319 -> #326 version extra #328 -> #330 security fix ( CVE-2016-10075 ) add non-master branch name minor safety minor documentation and comments","title":"v4.11.2 (2017-01-24)"},{"location":"releases/#v4111-2017-01-23","text":"whl | asc | gz | asc Officially support Python 3.6, addressing #333","title":"v4.11.1 (2017-01-23)"},{"location":"releases/#v4110-2017-01-12","text":"whl | gz postfix argument added #266 -> #270 fix tests for numpy #272 -> #302 PyPy3 #318 -> #325 7z extraction example script new logo #315 hit counter with logo colours and stats documentation updates safer setup.py Makefile emulation better github contributions integrations and Code of Conduct #310","title":"v4.11.0 (2017-01-12)"},{"location":"releases/#v4100-2016-11-12","text":"gz | zip fix maxinterval to adjust miniters to mininterval #249 minor bugfixes (eg #288 ) misc optimisations, unit tests, and benchmarks (eg #298 ) documentation updates","title":"v4.10.0 (2016-11-12)"},{"location":"releases/#v490-2016-10-31","text":"gz | zip monitoring thread to automatically to adjust miniters and avoid exceeding maxinterval test race conditions kill on KeyboardInterrupt + instant refresh low performance overhead, option to disable new CLI argument: --bytes to count chars disable automatically on non-TTY ( #281 ) fixed refresh() and clear() if disabled ( #286 ) misc fixes documentation unit tests optimisations, style fixes codacy badge safety and warning suppression ignore coverall failures ( #283 ) fix broken link in README ( #262 ) Fix time() in refresh() + avoid write() races ( #264 ) Fix __repr__() #269 Fix update(0) causing ZeroDivisionError (on first call) #268 Faster simple bar for perf test ( #257 ) cleaner tqdm_notebook exit when not run in a notebook ( #267 ) Disable coveralls because of duplicate comments on github ( #263 ) Migrate codecov config -> codecov.yml","title":"v4.9.0 (2016-10-31)"},{"location":"releases/#v484-2016-08-17","text":"whl | gz 14% overhead reduction fix exception when closing tqdm_notebook without a total support more pandas modules pandas.Series.progress_map pandas.DataFrame.progress_applymap Panel.progress_apply PanelGroupBy.progress_apply GroupBy.progress_aggregate GroupBy.progress_transform faster CI builds misc documentation update and link to wiki","title":"v4.8.4 (2016-08-17)"},{"location":"releases/#v481-2016-07-25","text":"custom tqdm warning/exceptions tests now multiprocessed and include pandas","title":"v4.8.1 (2016-07-25)"},{"location":"releases/#v480-2016-07-25","text":"tqdm.pandas classmethod replaces tqdm_pandas function (deprecated) ipython aliased imports fixes write without any instances readme update examples update test fixes and updates","title":"v4.8.0 (2016-07-25)"},{"location":"releases/#v476-2016-06-30","text":"support for pandas series support for numpy arrays tidy & coverage","title":"v4.7.6 (2016-06-30)"},{"location":"releases/#v474-2016-06-04","text":"whl | gz pandas.DataFrame.apply support tqdm_notebook.write() tqdm_gui.write() misc notebook fixes delay notebook imports (>80% reduction in import time when unused) optional colorama only on windows documentation tidy more & faster tests","title":"v4.7.4 (2016-06-04)"},{"location":"releases/#v470-2016-05-15","text":"whl | gz CLI custom delimiter support More robust CLI argument parsing either one or two - preceding kwargs (eg -ascii or --ascii ) no positional args (so no need to quote multi-word -desc for example) bool kwargs with implicit value= True still supported optional = sign after kwargs tests doc updates, badges pyversions, doi, licence, github","title":"v4.7.0 (2016-05-15)"},{"location":"releases/#v462-2016-05-15","text":"whl | gz | exe | zip Fix warnings due to IPython/Jupyter widget","title":"v4.6.2 (2016-05-15)"},{"location":"releases/#v461-2016-05-15","text":"whl | gz | exe | zip add IPython/Jupyter support fix {bar} length breaking display when using custom bar_format add a no inversion rate formatting for bar_format (i.e., always show it/s and never s/it )","title":"v4.6.1 (2016-05-15)"},{"location":"releases/#v450-2016-04-25","text":"whl | gz | zip print messages within (nested) loops using tqdm.write(...)","title":"v4.5.0 (2016-04-25)"},{"location":"releases/#v443-2016-04-24","text":"whl | gz | zip remove docopt dependency for CLI re-added update(0) ability to trigger refresh minor fixes re-added (OSI approved) licence to source dev versioning auto-fallback slight speed optimisation tests documentation","title":"v4.4.3 (2016-04-24)"},{"location":"releases/#v441-2016-04-22","text":"whl | gz | zip Module execution in CLI pipes! tqdm executable documentation tests MSYS aded to supported envs better VTE support dev versioning tests","title":"v4.4.1 (2016-04-22)"},{"location":"releases/#v420-2016-04-22","text":"whl | gz | zip MPL licence! slightly updated logo update examples update(0) allowed better VTE support ascii fallback when unicode not available","title":"v4.2.0 (2016-04-22)"},{"location":"releases/#v400-2016-02-04","text":"whl | gz | zip automate nested deprecate nested add manual override control with position documentation and example updates, coverage and tests make leave==True by default (was False )","title":"v4.0.0 (2016-02-04)"},{"location":"releases/#v380-2016-01-31","text":"whl | gz | zip update(n<1) raises error sanitise and update examples and README fix setup.py encoding error remove py32 from Travis changelog more accessible from README","title":"v3.8.0 (2016-01-31)"},{"location":"releases/#v371-2016-01-13","text":"whl | gz | exe | zip Added more OS support (FreeBSD, Solaris/SunOS) Added Python3.5 support and tests Added IronPython2.7 support Fix Makefile management for Python3 Added relative timing for tests More stable smoothed ETA Refactoring everything into one big tqdm class for even more subclassing fun","title":"v3.7.1 (2016-01-13)"},{"location":"releases/#v360-2015-12-31","text":"whl | gz | zip Added support for \"restarting\" a progressbar after a long pause without making the iteration rate go haywire. Simply call the unpause() method on the tqdm instance that is about to be restarted. Can also start tqdm skipping a number of steps specified by initial (without bias-ing ETA).","title":"v3.6.0 (2015-12-31)"},{"location":"releases/#v350-2015-12-31","text":"whl | gz | zip Fully customisable output format using the bar_format keyword argument. Valid strings: bar, n, n_fmt, total, total_fmt, percentage, rate, rate_fmt, elapsed, remaining, l_bar, r_bar, desc Example: bar_format='{desc}{bar}{rate:03.3d}' Default: '{l_bar}{bar}{r_bar}', where l_bar is '{desc}{percentage:3.0f}%|' and r_bar is '| {n_fmt}/{total_fmt} [{elapsed_str}<{remaining_str}, {rate_fmt}]'. Solaris, FreeBSD support mentioned Link redirects circumvented","title":"v3.5.0 (2015-12-31)"},{"location":"releases/#v330-2015-12-31","text":"whl | gz | zip Support added for pandas apply => progress_apply 80-char width when running interactive help() update examples using with syntax","title":"v3.3.0 (2015-12-31)"},{"location":"releases/#v314-2015-11-28","text":"whl | gz | exe | zip Added smoothing and maxinterval features for smooth progress bar and rate for unconstant, variable changes in update times, and abstracted gui to its own class and file. Also added a performance test to prevent performance regressions.","title":"v3.1.4 (2015-11-28)"},{"location":"releases/#v224-2015-11-08","text":"whl | gz | exe | zip Added the dynamic management of the bar on window resize, plus a better internal testing/build workflow using python setup.py make [alias] .","title":"v2.2.4 (2015-11-08)"},{"location":"releases/#v200-2015-10-11","text":"whl | gz | exe | zip First public release of the next generation of tqdm, with lots of new features, more speed, more unit testing, more coverage (100% yeah!), more beer and coffee. This release can also be downloaded on PyPi here .","title":"v2.0.0 (2015-10-11)"},{"location":"video/","text":"Slides ( space & shift + space for navigation)","title":"Video"},{"location":"dev/TMonitor/","text":"tqdm._monitor # TMonitor Objects # class TMonitor(Thread) Monitoring thread for tqdm bars. Monitors if tqdm bars are taking too much time to display and readjusts miniters automatically if necessary. Parameters tqdm_cls : class tqdm class to use (can be core tqdm or a submodule). sleep_interval : fload Time to sleep between monitoring checks.","title":"tqdm.TMonitor"},{"location":"dev/TMonitor/#tqdm_monitor","text":"","title":"tqdm._monitor"},{"location":"dev/TMonitor/#tmonitor-objects","text":"class TMonitor(Thread) Monitoring thread for tqdm bars. Monitors if tqdm bars are taking too much time to display and readjusts miniters automatically if necessary. Parameters tqdm_cls : class tqdm class to use (can be core tqdm or a submodule). sleep_interval : fload Time to sleep between monitoring checks.","title":"TMonitor Objects"},{"location":"dev/warnings/","text":"tqdm.std # Customisable progressbar decorator for iterators. Includes a default range iterator printing to stderr . Usage: >>> from tqdm import trange, tqdm >>> for i in trange(10): ... ... TqdmWarning Objects # class TqdmWarning(Warning) base class for all tqdm warnings. Used for non-external-code-breaking errors, such as garbled printing. TqdmExperimentalWarning Objects # class TqdmExperimentalWarning(TqdmWarning, FutureWarning) beta feature, unstable API and behaviour TqdmMonitorWarning Objects # class TqdmMonitorWarning(TqdmWarning, RuntimeWarning) tqdm monitor errors which do not affect external functionality TqdmDefaultWriteLock Objects # class TqdmDefaultWriteLock(object) Provide a default write lock for thread and multiprocessing safety. Works only on platforms supporting fork (so Windows is excluded). You must initialise a tqdm or TqdmDefaultWriteLock instance before forking in order for the write lock to work. On Windows, you need to supply the lock from the parent to the children as an argument to joblib or the parallelism lib you use.","title":"Warnings and Exceptions"},{"location":"dev/warnings/#tqdmstd","text":"Customisable progressbar decorator for iterators. Includes a default range iterator printing to stderr . Usage: >>> from tqdm import trange, tqdm >>> for i in trange(10): ... ...","title":"tqdm.std"},{"location":"dev/warnings/#tqdmwarning-objects","text":"class TqdmWarning(Warning) base class for all tqdm warnings. Used for non-external-code-breaking errors, such as garbled printing.","title":"TqdmWarning Objects"},{"location":"dev/warnings/#tqdmexperimentalwarning-objects","text":"class TqdmExperimentalWarning(TqdmWarning, FutureWarning) beta feature, unstable API and behaviour","title":"TqdmExperimentalWarning Objects"},{"location":"dev/warnings/#tqdmmonitorwarning-objects","text":"class TqdmMonitorWarning(TqdmWarning, RuntimeWarning) tqdm monitor errors which do not affect external functionality","title":"TqdmMonitorWarning Objects"},{"location":"dev/warnings/#tqdmdefaultwritelock-objects","text":"class TqdmDefaultWriteLock(object) Provide a default write lock for thread and multiprocessing safety. Works only on platforms supporting fork (so Windows is excluded). You must initialise a tqdm or TqdmDefaultWriteLock instance before forking in order for the write lock to work. On Windows, you need to supply the lock from the parent to the children as an argument to joblib or the parallelism lib you use.","title":"TqdmDefaultWriteLock Objects"},{"location":"docs/contrib.concurrent/","text":"tqdm.contrib.concurrent # Thin wrappers around concurrent.futures . _executor_map # _executor_map(PoolExecutor, fn, *iterables, **tqdm_kwargs) Implementation of thread_map and process_map . Parameters tqdm_class : [default: tqdm.auto.tqdm]. max_workers : [default: min(32, cpu_count() + 4)]. chunksize : [default: 1]. thread_map # thread_map(fn, *iterables, **tqdm_kwargs) Equivalent of list(map(fn, *iterables)) driven by concurrent.futures.ThreadPoolExecutor . Parameters tqdm_class : optional tqdm class to use for bars [default: tqdm.auto.tqdm]. max_workers : int, optional Maximum number of workers to spawn; passed to concurrent.futures.ThreadPoolExecutor.__init__ . [default: max(32, cpu_count() + 4)]. process_map # process_map(fn, *iterables, **tqdm_kwargs) Equivalent of list(map(fn, *iterables)) driven by concurrent.futures.ProcessPoolExecutor . Parameters tqdm_class : optional tqdm class to use for bars [default: tqdm.auto.tqdm]. max_workers : int, optional Maximum number of workers to spawn; passed to concurrent.futures.ProcessPoolExecutor.__init__ . [default: min(32, cpu_count() + 4)]. chunksize : int, optional Size of chunks sent to worker processes; passed to concurrent.futures.ProcessPoolExecutor.map . [default: 1].","title":"tqdm.contrib.concurrent"},{"location":"docs/contrib.concurrent/#tqdmcontribconcurrent","text":"Thin wrappers around concurrent.futures .","title":"tqdm.contrib.concurrent"},{"location":"docs/contrib.concurrent/#_executor_map","text":"_executor_map(PoolExecutor, fn, *iterables, **tqdm_kwargs) Implementation of thread_map and process_map . Parameters tqdm_class : [default: tqdm.auto.tqdm]. max_workers : [default: min(32, cpu_count() + 4)]. chunksize : [default: 1].","title":"_executor_map"},{"location":"docs/contrib.concurrent/#thread_map","text":"thread_map(fn, *iterables, **tqdm_kwargs) Equivalent of list(map(fn, *iterables)) driven by concurrent.futures.ThreadPoolExecutor . Parameters tqdm_class : optional tqdm class to use for bars [default: tqdm.auto.tqdm]. max_workers : int, optional Maximum number of workers to spawn; passed to concurrent.futures.ThreadPoolExecutor.__init__ . [default: max(32, cpu_count() + 4)].","title":"thread_map"},{"location":"docs/contrib.concurrent/#process_map","text":"process_map(fn, *iterables, **tqdm_kwargs) Equivalent of list(map(fn, *iterables)) driven by concurrent.futures.ProcessPoolExecutor . Parameters tqdm_class : optional tqdm class to use for bars [default: tqdm.auto.tqdm]. max_workers : int, optional Maximum number of workers to spawn; passed to concurrent.futures.ProcessPoolExecutor.__init__ . [default: min(32, cpu_count() + 4)]. chunksize : int, optional Size of chunks sent to worker processes; passed to concurrent.futures.ProcessPoolExecutor.map . [default: 1].","title":"process_map"},{"location":"docs/contrib.discord/","text":"tqdm.contrib.discord # Sends updates to a Discord bot. Usage: >>> from tqdm.contrib.discord import tqdm, trange >>> for i in tqdm(iterable, token='{token}', channel_id='{channel_id}'): ... ... tqdm_discord Objects # class tqdm_discord(tqdm_auto) Standard tqdm.auto.tqdm but also sends updates to a Discord Bot. May take a few seconds to create ( __init__ ). create a discord bot (not public, no requirement of OAuth2 code grant, only send message permissions) & invite it to a channel: https://discordpy.readthedocs.io/en/latest/discord.html copy the bot {token} & {channel_id} and paste below >>> from tqdm.contrib.discord import tqdm, trange >>> for i in tqdm(iterable, token='{token}', channel_id='{channel_id}'): ... ... __init__ # | __init__(*args, **kwargs) Parameters token : str, required. Discord token [default: ${TQDM_DISCORD_TOKEN}]. channel_id : int, required. Discord channel ID [default: ${TQDM_DISCORD_CHANNEL_ID}]. mininterval : float, optional. Minimum of [default: 1.5] to avoid rate limit. See tqdm.auto.tqdm.__init__ for other parameters. __new__ # | __new__(cls, *args, **kwargs) Workaround for mixed-class same-stream nested progressbars. See 509 tdrange # tdrange(*args, **kwargs) A shortcut for tqdm.contrib.discord.tqdm(xrange(*args), **kwargs) . On Python3+, range is used instead of xrange .","title":"tqdm.contrib.discord"},{"location":"docs/contrib.discord/#tqdmcontribdiscord","text":"Sends updates to a Discord bot. Usage: >>> from tqdm.contrib.discord import tqdm, trange >>> for i in tqdm(iterable, token='{token}', channel_id='{channel_id}'): ... ...","title":"tqdm.contrib.discord"},{"location":"docs/contrib.discord/#tqdm_discord-objects","text":"class tqdm_discord(tqdm_auto) Standard tqdm.auto.tqdm but also sends updates to a Discord Bot. May take a few seconds to create ( __init__ ). create a discord bot (not public, no requirement of OAuth2 code grant, only send message permissions) & invite it to a channel: https://discordpy.readthedocs.io/en/latest/discord.html copy the bot {token} & {channel_id} and paste below >>> from tqdm.contrib.discord import tqdm, trange >>> for i in tqdm(iterable, token='{token}', channel_id='{channel_id}'): ... ...","title":"tqdm_discord Objects"},{"location":"docs/contrib.discord/#__init__","text":"| __init__(*args, **kwargs) Parameters token : str, required. Discord token [default: ${TQDM_DISCORD_TOKEN}]. channel_id : int, required. Discord channel ID [default: ${TQDM_DISCORD_CHANNEL_ID}]. mininterval : float, optional. Minimum of [default: 1.5] to avoid rate limit. See tqdm.auto.tqdm.__init__ for other parameters.","title":"__init__"},{"location":"docs/contrib.discord/#__new__","text":"| __new__(cls, *args, **kwargs) Workaround for mixed-class same-stream nested progressbars. See 509","title":"__new__"},{"location":"docs/contrib.discord/#tdrange","text":"tdrange(*args, **kwargs) A shortcut for tqdm.contrib.discord.tqdm(xrange(*args), **kwargs) . On Python3+, range is used instead of xrange .","title":"tdrange"},{"location":"docs/contrib.itertools/","text":"tqdm.contrib.itertools # Thin wrappers around itertools . product # product(*iterables, **tqdm_kwargs) Equivalent of itertools.product . Parameters tqdm_class : [default: tqdm.auto.tqdm].","title":"tqdm.contrib.itertools"},{"location":"docs/contrib.itertools/#tqdmcontribitertools","text":"Thin wrappers around itertools .","title":"tqdm.contrib.itertools"},{"location":"docs/contrib.itertools/#product","text":"product(*iterables, **tqdm_kwargs) Equivalent of itertools.product . Parameters tqdm_class : [default: tqdm.auto.tqdm].","title":"product"},{"location":"docs/contrib/","text":"tqdm.contrib # Thin wrappers around common functions. Subpackages contain potentially unstable extensions. tenumerate # tenumerate(iterable, start=0, total=None, tqdm_class=tqdm_auto, **tqdm_kwargs) Equivalent of numpy.ndenumerate or builtin enumerate . Parameters tqdm_class : [default: tqdm.auto.tqdm]. _tzip # _tzip(iter1, *iter2plus, **tqdm_kwargs) Equivalent of builtin zip . Parameters tqdm_class : [default: tqdm.auto.tqdm]. _tmap # _tmap(function, *sequences, **tqdm_kwargs) Equivalent of builtin map . Parameters tqdm_class : [default: tqdm.auto.tqdm].","title":"tqdm.contrib"},{"location":"docs/contrib/#tqdmcontrib","text":"Thin wrappers around common functions. Subpackages contain potentially unstable extensions.","title":"tqdm.contrib"},{"location":"docs/contrib/#tenumerate","text":"tenumerate(iterable, start=0, total=None, tqdm_class=tqdm_auto, **tqdm_kwargs) Equivalent of numpy.ndenumerate or builtin enumerate . Parameters tqdm_class : [default: tqdm.auto.tqdm].","title":"tenumerate"},{"location":"docs/contrib/#_tzip","text":"_tzip(iter1, *iter2plus, **tqdm_kwargs) Equivalent of builtin zip . Parameters tqdm_class : [default: tqdm.auto.tqdm].","title":"_tzip"},{"location":"docs/contrib/#_tmap","text":"_tmap(function, *sequences, **tqdm_kwargs) Equivalent of builtin map . Parameters tqdm_class : [default: tqdm.auto.tqdm].","title":"_tmap"},{"location":"docs/contrib.telegram/","text":"tqdm.contrib.telegram # Sends updates to a Telegram bot. Usage: >>> from tqdm.contrib.telegram import tqdm, trange >>> for i in trange(10, token='{token}', chat_id='{chat_id}'): ... ... tqdm_telegram Objects # class tqdm_telegram(tqdm_auto) Standard tqdm.auto.tqdm but also sends updates to a Telegram Bot. May take a few seconds to create ( __init__ ). create a bot https://core.telegram.org/bots#6-botfather copy its {token} add the bot to a chat and send it a message such as /start go to https://api.telegram.org/bot {token} /getUpdates to find out the {chat_id} paste the {token} & {chat_id} below >>> from tqdm.contrib.telegram import tqdm, trange >>> for i in tqdm(iterable, token='{token}', chat_id='{chat_id}'): ... ... __init__ # | __init__(*args, **kwargs) Parameters token : str, required. Telegram token [default: ${TQDM_TELEGRAM_TOKEN}]. chat_id : str, required. Telegram chat ID [default: ${TQDM_TELEGRAM_CHAT_ID}]. See tqdm.auto.tqdm.__init__ for other parameters. __new__ # | __new__(cls, *args, **kwargs) Workaround for mixed-class same-stream nested progressbars. See 509 ttgrange # ttgrange(*args, **kwargs) A shortcut for tqdm.contrib.telegram.tqdm(xrange(*args), **kwargs) . On Python3+, range is used instead of xrange .","title":"tqdm.contrib.telegram"},{"location":"docs/contrib.telegram/#tqdmcontribtelegram","text":"Sends updates to a Telegram bot. Usage: >>> from tqdm.contrib.telegram import tqdm, trange >>> for i in trange(10, token='{token}', chat_id='{chat_id}'): ... ...","title":"tqdm.contrib.telegram"},{"location":"docs/contrib.telegram/#tqdm_telegram-objects","text":"class tqdm_telegram(tqdm_auto) Standard tqdm.auto.tqdm but also sends updates to a Telegram Bot. May take a few seconds to create ( __init__ ). create a bot https://core.telegram.org/bots#6-botfather copy its {token} add the bot to a chat and send it a message such as /start go to https://api.telegram.org/bot {token} /getUpdates to find out the {chat_id} paste the {token} & {chat_id} below >>> from tqdm.contrib.telegram import tqdm, trange >>> for i in tqdm(iterable, token='{token}', chat_id='{chat_id}'): ... ...","title":"tqdm_telegram Objects"},{"location":"docs/contrib.telegram/#__init__","text":"| __init__(*args, **kwargs) Parameters token : str, required. Telegram token [default: ${TQDM_TELEGRAM_TOKEN}]. chat_id : str, required. Telegram chat ID [default: ${TQDM_TELEGRAM_CHAT_ID}]. See tqdm.auto.tqdm.__init__ for other parameters.","title":"__init__"},{"location":"docs/contrib.telegram/#__new__","text":"| __new__(cls, *args, **kwargs) Workaround for mixed-class same-stream nested progressbars. See 509","title":"__new__"},{"location":"docs/contrib.telegram/#ttgrange","text":"ttgrange(*args, **kwargs) A shortcut for tqdm.contrib.telegram.tqdm(xrange(*args), **kwargs) . On Python3+, range is used instead of xrange .","title":"ttgrange"},{"location":"docs/gui/","text":"tqdm.gui # GUI progressbar decorator for iterators. Includes a default range iterator printing to stderr . Usage: >>> from tqdm.gui import trange, tqdm >>> for i in trange(10): ... ... tqdm_gui Objects # class tqdm_gui(std_tqdm) Experimental GUI version of tqdm! tgrange # tgrange(*args, **kwargs) A shortcut for tqdm.gui.tqdm(xrange(*args), **kwargs) . On Python3+, range is used instead of xrange .","title":"tqdm.gui"},{"location":"docs/gui/#tqdmgui","text":"GUI progressbar decorator for iterators. Includes a default range iterator printing to stderr . Usage: >>> from tqdm.gui import trange, tqdm >>> for i in trange(10): ... ...","title":"tqdm.gui"},{"location":"docs/gui/#tqdm_gui-objects","text":"class tqdm_gui(std_tqdm) Experimental GUI version of tqdm!","title":"tqdm_gui Objects"},{"location":"docs/gui/#tgrange","text":"tgrange(*args, **kwargs) A shortcut for tqdm.gui.tqdm(xrange(*args), **kwargs) . On Python3+, range is used instead of xrange .","title":"tgrange"},{"location":"docs/keras/","text":"tqdm.keras # TqdmCallback Objects # class TqdmCallback(keras.callbacks.Callback) keras callback for epoch and batch progress __init__ # | __init__(epochs=None, data_size=None, batch_size=None, verbose=1, tqdm_class=tqdm_auto) Parameters epochs : int, optional data_size : int, optional Number of training pairs. batch_size : int, optional Number of training pairs per batch. verbose : int 0: epoch, 1: batch (transient), 2: batch. [default: 1]. Will be set to 0 unless both data_size and batch_size are given. tqdm_class : optional tqdm class to use for bars [default: tqdm.auto.tqdm ].","title":"tqdm.keras"},{"location":"docs/keras/#tqdmkeras","text":"","title":"tqdm.keras"},{"location":"docs/keras/#tqdmcallback-objects","text":"class TqdmCallback(keras.callbacks.Callback) keras callback for epoch and batch progress","title":"TqdmCallback Objects"},{"location":"docs/keras/#__init__","text":"| __init__(epochs=None, data_size=None, batch_size=None, verbose=1, tqdm_class=tqdm_auto) Parameters epochs : int, optional data_size : int, optional Number of training pairs. batch_size : int, optional Number of training pairs per batch. verbose : int 0: epoch, 1: batch (transient), 2: batch. [default: 1]. Will be set to 0 unless both data_size and batch_size are given. tqdm_class : optional tqdm class to use for bars [default: tqdm.auto.tqdm ].","title":"__init__"},{"location":"docs/notebook/","text":"tqdm.notebook # IPython/Jupyter Notebook progressbar decorator for iterators. Includes a default range iterator printing to stderr . Usage: >>> from tqdm.notebook import trange, tqdm >>> for i in trange(10): ... ... tqdm_notebook Objects # class tqdm_notebook(std_tqdm) Experimental IPython/Jupyter Notebook widget using tqdm! status_printer # | @staticmethod | status_printer(_, total=None, desc=None, ncols=None) Manage the printing of an IPython/Jupyter Notebook progress bar widget. reset # | reset(total=None) Resets to 0 iterations for repeated use. Consider combining with leave=True . Parameters total : int or float, optional. Total to use for the new bar. tnrange # tnrange(*args, **kwargs) A shortcut for tqdm.notebook.tqdm(xrange(*args), **kwargs) . On Python3+, range is used instead of xrange .","title":"tqdm.notebook"},{"location":"docs/notebook/#tqdmnotebook","text":"IPython/Jupyter Notebook progressbar decorator for iterators. Includes a default range iterator printing to stderr . Usage: >>> from tqdm.notebook import trange, tqdm >>> for i in trange(10): ... ...","title":"tqdm.notebook"},{"location":"docs/notebook/#tqdm_notebook-objects","text":"class tqdm_notebook(std_tqdm) Experimental IPython/Jupyter Notebook widget using tqdm!","title":"tqdm_notebook Objects"},{"location":"docs/notebook/#status_printer","text":"| @staticmethod | status_printer(_, total=None, desc=None, ncols=None) Manage the printing of an IPython/Jupyter Notebook progress bar widget.","title":"status_printer"},{"location":"docs/notebook/#reset","text":"| reset(total=None) Resets to 0 iterations for repeated use. Consider combining with leave=True . Parameters total : int or float, optional. Total to use for the new bar.","title":"reset"},{"location":"docs/notebook/#tnrange","text":"tnrange(*args, **kwargs) A shortcut for tqdm.notebook.tqdm(xrange(*args), **kwargs) . On Python3+, range is used instead of xrange .","title":"tnrange"},{"location":"docs/shortcuts/","text":"tqdm.contrib.bells # All the bells & whistles: tqdm.auto tqdm.tqdm.pandas tqdm.contrib.telegram uses ${TQDM_TELEGRAM_TOKEN} and ${TQDM_TELEGRAM_CHAT_ID} tqdm.contrib.discord uses ${TQDM_DISCORD_TOKEN} and ${TQDM_DISCORD_CHANNEL_ID} tqdm.auto # tqdm.autonotebook but without import warnings. Usage: >>> from tqdm.auto import trange, tqdm >>> for i in trange(10): ... ... tqdm.autonotebook # Automatically choose between tqdm.notebook and tqdm.std . Usage: >>> from tqdm.autonotebook import trange, tqdm >>> for i in trange(10): ... ...","title":"Shortcuts"},{"location":"docs/shortcuts/#tqdmcontribbells","text":"All the bells & whistles: tqdm.auto tqdm.tqdm.pandas tqdm.contrib.telegram uses ${TQDM_TELEGRAM_TOKEN} and ${TQDM_TELEGRAM_CHAT_ID} tqdm.contrib.discord uses ${TQDM_DISCORD_TOKEN} and ${TQDM_DISCORD_CHANNEL_ID}","title":"tqdm.contrib.bells"},{"location":"docs/shortcuts/#tqdmauto","text":"tqdm.autonotebook but without import warnings. Usage: >>> from tqdm.auto import trange, tqdm >>> for i in trange(10): ... ...","title":"tqdm.auto"},{"location":"docs/shortcuts/#tqdmautonotebook","text":"Automatically choose between tqdm.notebook and tqdm.std . Usage: >>> from tqdm.autonotebook import trange, tqdm >>> for i in trange(10): ... ...","title":"tqdm.autonotebook"},{"location":"docs/tqdm/","text":"tqdm.std # Customisable progressbar decorator for iterators. Includes a default range iterator printing to stderr . Usage: >>> from tqdm import trange, tqdm >>> for i in trange(10): ... ... tqdm Objects # class tqdm(Comparable) Decorate an iterable object, returning an iterator which acts exactly like the original iterable, but prints a dynamically updating progressbar every time a value is requested. format_sizeof # | @staticmethod | format_sizeof(num, suffix='', divisor=1000) Formats a number (greater than unity) with SI Order of Magnitude prefixes. Parameters num : float Number ( >= 1) to format. suffix : str, optional Post-postfix [default: '']. divisor : float, optional Divisor between prefixes [default: 1000]. Returns out : str Number with Order of Magnitude SI unit postfix. format_interval # | @staticmethod | format_interval(t) Formats a number of seconds as a clock time, [H:]MM:SS Parameters t : int Number of seconds. Returns out : str [H:]MM:SS format_num # | @staticmethod | format_num(n) Intelligent scientific notation (.3g). Parameters n : int or float or Numeric A Number. Returns out : str Formatted number. ema # | @staticmethod | ema(x, mu=None, alpha=0.3) Exponential moving average: smoothing to give progressively lower weights to older values. Parameters x : float New value to include in EMA. mu : float, optional Previous EMA value. alpha : float, optional Smoothing factor in range [0, 1], [default: 0.3]. Increase to give more weight to recent values. Ranges from 0 (yields mu) to 1 (yields x). status_printer # | @staticmethod | status_printer(file) Manage the printing and in-place updating of a line of characters. Note that if the string is longer than a line, then in-place updating may not work (it will print a new line at each refresh). format_meter # | @staticmethod | format_meter(n, total, elapsed, ncols=None, prefix='', ascii=False, unit='it', unit_scale=False, rate=None, bar_format=None, postfix=None, unit_divisor=1000, **extra_kwargs) Return a string-based progress bar given some parameters Parameters n : int or float Number of finished iterations. total : int or float The expected total number of iterations. If meaningless (None), only basic progress statistics are displayed (no ETA). elapsed : float Number of seconds passed since start. ncols : int, optional The width of the entire output message. If specified, dynamically resizes {bar} to stay within this bound [default: None]. If 0 , will not print any bar (only stats). The fallback is {bar:10} . prefix : str, optional Prefix message (included in total width) [default: '']. Use as {desc} in bar_format string. ascii : bool, optional or str, optional If not set, use unicode (smooth blocks) to fill the meter [default: False]. The fallback is to use ASCII characters \" 123456789#\". unit : str, optional The iteration unit [default: 'it']. unit_scale : bool or int or float, optional If 1 or True, the number of iterations will be printed with an appropriate SI metric prefix (k = 10^3, M = 10^6, etc.) [default: False]. If any other non-zero number, will scale total and n . rate : float, optional Manual override for iteration rate. If [default: None], uses n/elapsed. bar_format : str, optional Specify a custom bar string formatting. May impact performance. [default: '{l_bar}{bar}{r_bar}'], where l_bar='{desc}: {percentage:3.0f}%|' and r_bar='| {n_fmt}/{total_fmt} [{elapsed}<{remaining}, ' '{rate_fmt}{postfix}]' Possible vars: l_bar, bar, r_bar, n, n_fmt, total, total_fmt, percentage, elapsed, elapsed_s, ncols, nrows, desc, unit, rate, rate_fmt, rate_noinv, rate_noinv_fmt, rate_inv, rate_inv_fmt, postfix, unit_divisor, remaining, remaining_s. Note that a trailing \": \" is automatically removed after {desc} if the latter is empty. postfix : *, optional Similar to prefix , but placed at the end (e.g. for additional stats). Note: postfix is usually a string (not a dict) for this method, and will if possible be set to postfix = ', ' + postfix. However other types are supported ( 382 ). unit_divisor : float, optional [default: 1000], ignored unless unit_scale is True. Returns out : Formatted meter and stats, ready to display. _get_free_pos # | @classmethod | _get_free_pos(cls, instance=None) Skips specified instance. _decr_instances # | @classmethod | _decr_instances(cls, instance) Remove from list and reposition another unfixed bar to fill the new gap. This means that by default (where all nested bars are unfixed), order is not maintained but screen flicker/blank space is minimised. (tqdm<=4.44.1 moved ALL subsequent unfixed bars up.) write # | @classmethod | write(cls, s, file=None, end=\"\\n\", nolock=False) Print a message via tqdm (without overlap with bars). external_write_mode # | @classmethod | @contextmanager | external_write_mode(cls, file=None, nolock=False) Disable tqdm within context and refresh tqdm when exits. Useful when writing to standard output stream set_lock # | @classmethod | set_lock(cls, lock) Set the global lock. get_lock # | @classmethod | get_lock(cls) Get the global lock. Construct it if it does not exist. pandas # | @classmethod | pandas(tclass, *targs, **tkwargs) Registers the given tqdm class with pandas.core. ( frame.DataFrame | series.Series | groupby.(generic.)DataFrameGroupBy | groupby.(generic.)SeriesGroupBy ).progress_apply A new instance will be create every time progress_apply is called, and each instance will automatically close() upon completion. Parameters targs, tkwargs : arguments for the tqdm instance Examples >>> import pandas as pd >>> import numpy as np >>> from tqdm import tqdm >>> from tqdm.gui import tqdm as tqdm_gui >>> >>> df = pd.DataFrame(np.random.randint(0, 100, (100000, 6))) >>> tqdm.pandas(ncols=50) # can use tqdm_gui, optional kwargs, etc >>> # Now you can use `progress_apply` instead of `apply` >>> df.groupby(0).progress_apply(lambda x: x**2) References https://stackoverflow.com/questions/18603270/progress-indicator-during-pandas-operations-python __init__ # | __init__(iterable=None, desc=None, total=None, leave=True, file=None, ncols=None, mininterval=0.1, maxinterval=10.0, miniters=None, ascii=None, disable=False, unit='it', unit_scale=False, dynamic_ncols=False, smoothing=0.3, bar_format=None, initial=0, position=None, postfix=None, unit_divisor=1000, write_bytes=None, lock_args=None, nrows=None, gui=False, **kwargs) Parameters iterable : iterable, optional Iterable to decorate with a progressbar. Leave blank to manually manage the updates. desc : str, optional Prefix for the progressbar. total : int or float, optional The number of expected iterations. If unspecified, len(iterable) is used if possible. If float(\"inf\") or as a last resort, only basic progress statistics are displayed (no ETA, no progressbar). If gui is True and this parameter needs subsequent updating, specify an initial arbitrary large positive number, e.g. 9e9. leave : bool, optional If [default: True], keeps all traces of the progressbar upon termination of iteration. If None , will leave only if position is 0 . file : io.TextIOWrapper or io.StringIO , optional Specifies where to output the progress messages (default: sys.stderr). Uses file.write(str) and file.flush() methods. For encoding, see write_bytes . ncols : int, optional The width of the entire output message. If specified, dynamically resizes the progressbar to stay within this bound. If unspecified, attempts to use environment width. The fallback is a meter width of 10 and no limit for the counter and statistics. If 0, will not print any meter (only stats). mininterval : float, optional Minimum progress display update interval [default: 0.1] seconds. maxinterval : float, optional Maximum progress display update interval [default: 10] seconds. Automatically adjusts miniters to correspond to mininterval after long display update lag. Only works if dynamic_miniters or monitor thread is enabled. miniters : int or float, optional Minimum progress display update interval, in iterations. If 0 and dynamic_miniters , will automatically adjust to equal mininterval (more CPU efficient, good for tight loops). If > 0, will skip display of specified number of iterations. Tweak this and mininterval to get very efficient loops. If your progress is erratic with both fast and slow iterations (network, skipping items, etc) you should set miniters=1. ascii : bool or str, optional If unspecified or False, use unicode (smooth blocks) to fill the meter. The fallback is to use ASCII characters \" 123456789#\". disable : bool, optional Whether to disable the entire progressbar wrapper [default: False]. If set to None, disable on non-TTY. unit : str, optional String that will be used to define the unit of each iteration [default: it]. unit_scale : bool or int or float, optional If 1 or True, the number of iterations will be reduced/scaled automatically and a metric prefix following the International System of Units standard will be added (kilo, mega, etc.) [default: False]. If any other non-zero number, will scale total and n . dynamic_ncols : bool, optional If set, constantly alters ncols and nrows to the environment (allowing for window resizes) [default: False]. smoothing : float, optional Exponential moving average smoothing factor for speed estimates (ignored in GUI mode). Ranges from 0 (average speed) to 1 (current/instantaneous speed) [default: 0.3]. bar_format : str, optional Specify a custom bar string formatting. May impact performance. [default: '{l_bar}{bar}{r_bar}'], where l_bar='{desc}: {percentage:3.0f}%|' and r_bar='| {n_fmt}/{total_fmt} [{elapsed}<{remaining}, ' '{rate_fmt}{postfix}]' Possible vars: l_bar, bar, r_bar, n, n_fmt, total, total_fmt, percentage, elapsed, elapsed_s, ncols, nrows, desc, unit, rate, rate_fmt, rate_noinv, rate_noinv_fmt, rate_inv, rate_inv_fmt, postfix, unit_divisor, remaining, remaining_s. Note that a trailing \": \" is automatically removed after {desc} if the latter is empty. initial : int or float, optional The initial counter value. Useful when restarting a progress bar [default: 0]. If using float, consider specifying {n:.3f} or similar in bar_format , or specifying unit_scale . position : int, optional Specify the line offset to print this bar (starting from 0) Automatic if unspecified. Useful to manage multiple bars at once (eg, from threads). postfix : dict or *, optional Specify additional stats to display at the end of the bar. Calls set_postfix(**postfix) if possible (dict). unit_divisor : float, optional [default: 1000], ignored unless unit_scale is True. write_bytes : bool, optional If (default: None) and file is unspecified, bytes will be written in Python 2. If True will also write bytes. In all other cases will default to unicode. lock_args : tuple, optional Passed to refresh for intermediate output (initialisation, iterating, and updating). nrows : int, optional The screen height. If specified, hides nested bars outside this bound. If unspecified, attempts to use environment height. The fallback is 20. gui : bool, optional WARNING: internal parameter - do not use. Use tqdm.gui.tqdm(...) instead. If set, will attempt to use matplotlib animations for a graphical output [default: False]. Returns out : decorated iterator. __iter__ # | __iter__() Backward-compatibility to use: for x in tqdm(iterable) update # | update(n=1) Manually update the progress bar, useful for streams such as reading files. E.g.: >>> t = tqdm(total=filesize) # Initialise >>> for current_buffer in stream: ... ... ... t.update(len(current_buffer)) >>> t.close() The last line is highly recommended, but possibly not necessary if t.update() will be called in such a way that filesize will be exactly reached and printed. Parameters n : int or float, optional Increment to add to the internal counter of iterations [default: 1]. If using float, consider specifying {n:.3f} or similar in bar_format , or specifying unit_scale . close # | close() Cleanup and (if leave=False) close the progressbar. clear # | clear(nolock=False) Clear current bar display. refresh # | refresh(nolock=False, lock_args=None) Force refresh the display of this bar. Parameters nolock : bool, optional If True , does not lock. If [default: False ]: calls acquire() on internal lock. lock_args : tuple, optional Passed to internal lock's acquire() . If specified, will only display() if acquire() returns True . unpause # | unpause() Restart tqdm timer from last print time. reset # | reset(total=None) Resets to 0 iterations for repeated use. Consider combining with leave=True . Parameters total : int or float, optional. Total to use for the new bar. set_description # | set_description(desc=None, refresh=True) Set/modify description of the progress bar. Parameters desc : str, optional refresh : bool, optional Forces refresh [default: True]. set_description_str # | set_description_str(desc=None, refresh=True) Set/modify description without ': ' appended. set_postfix # | set_postfix(ordered_dict=None, refresh=True, **kwargs) Set/modify postfix (additional stats) with automatic formatting based on datatype. Parameters ordered_dict : dict or OrderedDict, optional refresh : bool, optional Forces refresh [default: True]. kwargs : dict, optional set_postfix_str # | set_postfix_str(s='', refresh=True) Postfix without dictionary expansion, similar to prefix handling. format_dict # | @property | format_dict() Public API for read-only member access. display # | display(msg=None, pos=None) Use self.sp to display msg in the specified pos . Consider overloading this function when inheriting to use e.g.: self.some_frontend(**self.format_dict) instead of self.sp . Parameters msg : str, optional. What to display (default: repr(self) ). pos : int, optional. Position to moveto (default: abs(self.pos) ). wrapattr # | @classmethod | @contextmanager | wrapattr(tclass, stream, method, total=None, bytes=True, **tkwargs) stream : file-like object. method : str, \"read\" or \"write\". The result of read() and the first argument of write() should have a len() . >>> with tqdm.wrapattr(file_obj, \"read\", total=file_obj.size) as fobj: ... while True: ... chunk = fobj.read(chunk_size) ... if not chunk: ... break trange # trange(*args, **kwargs) A shortcut for tqdm(xrange( args), *kwargs). On Python3+ range is used instead of xrange.","title":"tqdm.tqdm"},{"location":"docs/tqdm/#tqdmstd","text":"Customisable progressbar decorator for iterators. Includes a default range iterator printing to stderr . Usage: >>> from tqdm import trange, tqdm >>> for i in trange(10): ... ...","title":"tqdm.std"},{"location":"docs/tqdm/#tqdm-objects","text":"class tqdm(Comparable) Decorate an iterable object, returning an iterator which acts exactly like the original iterable, but prints a dynamically updating progressbar every time a value is requested.","title":"tqdm Objects"},{"location":"docs/tqdm/#format_sizeof","text":"| @staticmethod | format_sizeof(num, suffix='', divisor=1000) Formats a number (greater than unity) with SI Order of Magnitude prefixes. Parameters num : float Number ( >= 1) to format. suffix : str, optional Post-postfix [default: '']. divisor : float, optional Divisor between prefixes [default: 1000]. Returns out : str Number with Order of Magnitude SI unit postfix.","title":"format_sizeof"},{"location":"docs/tqdm/#format_interval","text":"| @staticmethod | format_interval(t) Formats a number of seconds as a clock time, [H:]MM:SS Parameters t : int Number of seconds. Returns out : str [H:]MM:SS","title":"format_interval"},{"location":"docs/tqdm/#format_num","text":"| @staticmethod | format_num(n) Intelligent scientific notation (.3g). Parameters n : int or float or Numeric A Number. Returns out : str Formatted number.","title":"format_num"},{"location":"docs/tqdm/#ema","text":"| @staticmethod | ema(x, mu=None, alpha=0.3) Exponential moving average: smoothing to give progressively lower weights to older values. Parameters x : float New value to include in EMA. mu : float, optional Previous EMA value. alpha : float, optional Smoothing factor in range [0, 1], [default: 0.3]. Increase to give more weight to recent values. Ranges from 0 (yields mu) to 1 (yields x).","title":"ema"},{"location":"docs/tqdm/#status_printer","text":"| @staticmethod | status_printer(file) Manage the printing and in-place updating of a line of characters. Note that if the string is longer than a line, then in-place updating may not work (it will print a new line at each refresh).","title":"status_printer"},{"location":"docs/tqdm/#format_meter","text":"| @staticmethod | format_meter(n, total, elapsed, ncols=None, prefix='', ascii=False, unit='it', unit_scale=False, rate=None, bar_format=None, postfix=None, unit_divisor=1000, **extra_kwargs) Return a string-based progress bar given some parameters Parameters n : int or float Number of finished iterations. total : int or float The expected total number of iterations. If meaningless (None), only basic progress statistics are displayed (no ETA). elapsed : float Number of seconds passed since start. ncols : int, optional The width of the entire output message. If specified, dynamically resizes {bar} to stay within this bound [default: None]. If 0 , will not print any bar (only stats). The fallback is {bar:10} . prefix : str, optional Prefix message (included in total width) [default: '']. Use as {desc} in bar_format string. ascii : bool, optional or str, optional If not set, use unicode (smooth blocks) to fill the meter [default: False]. The fallback is to use ASCII characters \" 123456789#\". unit : str, optional The iteration unit [default: 'it']. unit_scale : bool or int or float, optional If 1 or True, the number of iterations will be printed with an appropriate SI metric prefix (k = 10^3, M = 10^6, etc.) [default: False]. If any other non-zero number, will scale total and n . rate : float, optional Manual override for iteration rate. If [default: None], uses n/elapsed. bar_format : str, optional Specify a custom bar string formatting. May impact performance. [default: '{l_bar}{bar}{r_bar}'], where l_bar='{desc}: {percentage:3.0f}%|' and r_bar='| {n_fmt}/{total_fmt} [{elapsed}<{remaining}, ' '{rate_fmt}{postfix}]' Possible vars: l_bar, bar, r_bar, n, n_fmt, total, total_fmt, percentage, elapsed, elapsed_s, ncols, nrows, desc, unit, rate, rate_fmt, rate_noinv, rate_noinv_fmt, rate_inv, rate_inv_fmt, postfix, unit_divisor, remaining, remaining_s. Note that a trailing \": \" is automatically removed after {desc} if the latter is empty. postfix : *, optional Similar to prefix , but placed at the end (e.g. for additional stats). Note: postfix is usually a string (not a dict) for this method, and will if possible be set to postfix = ', ' + postfix. However other types are supported ( 382 ). unit_divisor : float, optional [default: 1000], ignored unless unit_scale is True. Returns out : Formatted meter and stats, ready to display.","title":"format_meter"},{"location":"docs/tqdm/#_get_free_pos","text":"| @classmethod | _get_free_pos(cls, instance=None) Skips specified instance.","title":"_get_free_pos"},{"location":"docs/tqdm/#_decr_instances","text":"| @classmethod | _decr_instances(cls, instance) Remove from list and reposition another unfixed bar to fill the new gap. This means that by default (where all nested bars are unfixed), order is not maintained but screen flicker/blank space is minimised. (tqdm<=4.44.1 moved ALL subsequent unfixed bars up.)","title":"_decr_instances"},{"location":"docs/tqdm/#write","text":"| @classmethod | write(cls, s, file=None, end=\"\\n\", nolock=False) Print a message via tqdm (without overlap with bars).","title":"write"},{"location":"docs/tqdm/#external_write_mode","text":"| @classmethod | @contextmanager | external_write_mode(cls, file=None, nolock=False) Disable tqdm within context and refresh tqdm when exits. Useful when writing to standard output stream","title":"external_write_mode"},{"location":"docs/tqdm/#set_lock","text":"| @classmethod | set_lock(cls, lock) Set the global lock.","title":"set_lock"},{"location":"docs/tqdm/#get_lock","text":"| @classmethod | get_lock(cls) Get the global lock. Construct it if it does not exist.","title":"get_lock"},{"location":"docs/tqdm/#pandas","text":"| @classmethod | pandas(tclass, *targs, **tkwargs) Registers the given tqdm class with pandas.core. ( frame.DataFrame | series.Series | groupby.(generic.)DataFrameGroupBy | groupby.(generic.)SeriesGroupBy ).progress_apply A new instance will be create every time progress_apply is called, and each instance will automatically close() upon completion. Parameters targs, tkwargs : arguments for the tqdm instance Examples >>> import pandas as pd >>> import numpy as np >>> from tqdm import tqdm >>> from tqdm.gui import tqdm as tqdm_gui >>> >>> df = pd.DataFrame(np.random.randint(0, 100, (100000, 6))) >>> tqdm.pandas(ncols=50) # can use tqdm_gui, optional kwargs, etc >>> # Now you can use `progress_apply` instead of `apply` >>> df.groupby(0).progress_apply(lambda x: x**2) References https://stackoverflow.com/questions/18603270/progress-indicator-during-pandas-operations-python","title":"pandas"},{"location":"docs/tqdm/#__init__","text":"| __init__(iterable=None, desc=None, total=None, leave=True, file=None, ncols=None, mininterval=0.1, maxinterval=10.0, miniters=None, ascii=None, disable=False, unit='it', unit_scale=False, dynamic_ncols=False, smoothing=0.3, bar_format=None, initial=0, position=None, postfix=None, unit_divisor=1000, write_bytes=None, lock_args=None, nrows=None, gui=False, **kwargs) Parameters iterable : iterable, optional Iterable to decorate with a progressbar. Leave blank to manually manage the updates. desc : str, optional Prefix for the progressbar. total : int or float, optional The number of expected iterations. If unspecified, len(iterable) is used if possible. If float(\"inf\") or as a last resort, only basic progress statistics are displayed (no ETA, no progressbar). If gui is True and this parameter needs subsequent updating, specify an initial arbitrary large positive number, e.g. 9e9. leave : bool, optional If [default: True], keeps all traces of the progressbar upon termination of iteration. If None , will leave only if position is 0 . file : io.TextIOWrapper or io.StringIO , optional Specifies where to output the progress messages (default: sys.stderr). Uses file.write(str) and file.flush() methods. For encoding, see write_bytes . ncols : int, optional The width of the entire output message. If specified, dynamically resizes the progressbar to stay within this bound. If unspecified, attempts to use environment width. The fallback is a meter width of 10 and no limit for the counter and statistics. If 0, will not print any meter (only stats). mininterval : float, optional Minimum progress display update interval [default: 0.1] seconds. maxinterval : float, optional Maximum progress display update interval [default: 10] seconds. Automatically adjusts miniters to correspond to mininterval after long display update lag. Only works if dynamic_miniters or monitor thread is enabled. miniters : int or float, optional Minimum progress display update interval, in iterations. If 0 and dynamic_miniters , will automatically adjust to equal mininterval (more CPU efficient, good for tight loops). If > 0, will skip display of specified number of iterations. Tweak this and mininterval to get very efficient loops. If your progress is erratic with both fast and slow iterations (network, skipping items, etc) you should set miniters=1. ascii : bool or str, optional If unspecified or False, use unicode (smooth blocks) to fill the meter. The fallback is to use ASCII characters \" 123456789#\". disable : bool, optional Whether to disable the entire progressbar wrapper [default: False]. If set to None, disable on non-TTY. unit : str, optional String that will be used to define the unit of each iteration [default: it]. unit_scale : bool or int or float, optional If 1 or True, the number of iterations will be reduced/scaled automatically and a metric prefix following the International System of Units standard will be added (kilo, mega, etc.) [default: False]. If any other non-zero number, will scale total and n . dynamic_ncols : bool, optional If set, constantly alters ncols and nrows to the environment (allowing for window resizes) [default: False]. smoothing : float, optional Exponential moving average smoothing factor for speed estimates (ignored in GUI mode). Ranges from 0 (average speed) to 1 (current/instantaneous speed) [default: 0.3]. bar_format : str, optional Specify a custom bar string formatting. May impact performance. [default: '{l_bar}{bar}{r_bar}'], where l_bar='{desc}: {percentage:3.0f}%|' and r_bar='| {n_fmt}/{total_fmt} [{elapsed}<{remaining}, ' '{rate_fmt}{postfix}]' Possible vars: l_bar, bar, r_bar, n, n_fmt, total, total_fmt, percentage, elapsed, elapsed_s, ncols, nrows, desc, unit, rate, rate_fmt, rate_noinv, rate_noinv_fmt, rate_inv, rate_inv_fmt, postfix, unit_divisor, remaining, remaining_s. Note that a trailing \": \" is automatically removed after {desc} if the latter is empty. initial : int or float, optional The initial counter value. Useful when restarting a progress bar [default: 0]. If using float, consider specifying {n:.3f} or similar in bar_format , or specifying unit_scale . position : int, optional Specify the line offset to print this bar (starting from 0) Automatic if unspecified. Useful to manage multiple bars at once (eg, from threads). postfix : dict or *, optional Specify additional stats to display at the end of the bar. Calls set_postfix(**postfix) if possible (dict). unit_divisor : float, optional [default: 1000], ignored unless unit_scale is True. write_bytes : bool, optional If (default: None) and file is unspecified, bytes will be written in Python 2. If True will also write bytes. In all other cases will default to unicode. lock_args : tuple, optional Passed to refresh for intermediate output (initialisation, iterating, and updating). nrows : int, optional The screen height. If specified, hides nested bars outside this bound. If unspecified, attempts to use environment height. The fallback is 20. gui : bool, optional WARNING: internal parameter - do not use. Use tqdm.gui.tqdm(...) instead. If set, will attempt to use matplotlib animations for a graphical output [default: False]. Returns out : decorated iterator.","title":"__init__"},{"location":"docs/tqdm/#__iter__","text":"| __iter__() Backward-compatibility to use: for x in tqdm(iterable)","title":"__iter__"},{"location":"docs/tqdm/#update","text":"| update(n=1) Manually update the progress bar, useful for streams such as reading files. E.g.: >>> t = tqdm(total=filesize) # Initialise >>> for current_buffer in stream: ... ... ... t.update(len(current_buffer)) >>> t.close() The last line is highly recommended, but possibly not necessary if t.update() will be called in such a way that filesize will be exactly reached and printed. Parameters n : int or float, optional Increment to add to the internal counter of iterations [default: 1]. If using float, consider specifying {n:.3f} or similar in bar_format , or specifying unit_scale .","title":"update"},{"location":"docs/tqdm/#close","text":"| close() Cleanup and (if leave=False) close the progressbar.","title":"close"},{"location":"docs/tqdm/#clear","text":"| clear(nolock=False) Clear current bar display.","title":"clear"},{"location":"docs/tqdm/#refresh","text":"| refresh(nolock=False, lock_args=None) Force refresh the display of this bar. Parameters nolock : bool, optional If True , does not lock. If [default: False ]: calls acquire() on internal lock. lock_args : tuple, optional Passed to internal lock's acquire() . If specified, will only display() if acquire() returns True .","title":"refresh"},{"location":"docs/tqdm/#unpause","text":"| unpause() Restart tqdm timer from last print time.","title":"unpause"},{"location":"docs/tqdm/#reset","text":"| reset(total=None) Resets to 0 iterations for repeated use. Consider combining with leave=True . Parameters total : int or float, optional. Total to use for the new bar.","title":"reset"},{"location":"docs/tqdm/#set_description","text":"| set_description(desc=None, refresh=True) Set/modify description of the progress bar. Parameters desc : str, optional refresh : bool, optional Forces refresh [default: True].","title":"set_description"},{"location":"docs/tqdm/#set_description_str","text":"| set_description_str(desc=None, refresh=True) Set/modify description without ': ' appended.","title":"set_description_str"},{"location":"docs/tqdm/#set_postfix","text":"| set_postfix(ordered_dict=None, refresh=True, **kwargs) Set/modify postfix (additional stats) with automatic formatting based on datatype. Parameters ordered_dict : dict or OrderedDict, optional refresh : bool, optional Forces refresh [default: True]. kwargs : dict, optional","title":"set_postfix"},{"location":"docs/tqdm/#set_postfix_str","text":"| set_postfix_str(s='', refresh=True) Postfix without dictionary expansion, similar to prefix handling.","title":"set_postfix_str"},{"location":"docs/tqdm/#format_dict","text":"| @property | format_dict() Public API for read-only member access.","title":"format_dict"},{"location":"docs/tqdm/#display","text":"| display(msg=None, pos=None) Use self.sp to display msg in the specified pos . Consider overloading this function when inheriting to use e.g.: self.some_frontend(**self.format_dict) instead of self.sp . Parameters msg : str, optional. What to display (default: repr(self) ). pos : int, optional. Position to moveto (default: abs(self.pos) ).","title":"display"},{"location":"docs/tqdm/#wrapattr","text":"| @classmethod | @contextmanager | wrapattr(tclass, stream, method, total=None, bytes=True, **tkwargs) stream : file-like object. method : str, \"read\" or \"write\". The result of read() and the first argument of write() should have a len() . >>> with tqdm.wrapattr(file_obj, \"read\", total=file_obj.size) as fobj: ... while True: ... chunk = fobj.read(chunk_size) ... if not chunk: ... break","title":"wrapattr"},{"location":"docs/tqdm/#trange","text":"trange(*args, **kwargs) A shortcut for tqdm(xrange( args), *kwargs). On Python3+ range is used instead of xrange.","title":"trange"},{"location":"presentation-%28pydata%29/video/","text":"Slides ( space & shift + space for navigation)","title":"Video"}]}